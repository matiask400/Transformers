ID,code,result,true_count,false_count
1,"def two_sum(nums, target):
    hashmap = {}
    for i in range(len(nums)):
        complement = target - nums[i]
        if complement in hashmap:
            return [i, hashmap[complement]]
        hashmap[nums[i]] = i


# Test cases
inputs = [([2,7,11,15], 9), ([3,2,4], 6), ([3,3], 6)]
outputs = [[0,1], [1,2], [0,1]]

for i in range(len(inputs)):
    solution = two_sum(inputs[i][0], inputs[i][1])
    print(solution == outputs[i])","False
False
False",0,3
2,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1, l2):
        dummy = ListNode(0)
        curr = dummy
        carry = 0

        while l1 or l2 or carry:
            val1 = l1.val if l1 else 0
            val2 = l2.val if l2 else 0

            total = val1 + val2 + carry
            carry = total // 10
            curr.next = ListNode(total % 10)

            curr = curr.next
            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None

        return dummy.next

# Test the solution
l1 = [2,4,3]
l2 = [5,6,4]
output1 = [7,0,8]

l12 = [0]
l22 = [0]
output2 = [0]

l13 = [9,9,9,9,9,9,9]
l23 = [9,9,9,9]
output3 = [8,9,9,9,0,0,0,1]

def list_to_linked_list(lst):
    dummy = ListNode(0)
    curr = dummy
    for val in lst:
        curr.next = ListNode(val)
        curr = curr.next
    return dummy.next

def linked_list_to_list(head):
    lst = []
    curr = head
    while curr:
        lst.append(curr.val)
        curr = curr.next
    return lst

solution = Solution()
result1 = solution.addTwoNumbers(list_to_linked_list(l1), list_to_linked_list(l2))
result2 = solution.addTwoNumbers(list_to_linked_list(l12), list_to_linked_list(l22))
result3 = solution.addTwoNumbers(list_to_linked_list(l13), list_to_linked_list(l23))

print(linked_list_to_list(result1) == output1)  # True
print(linked_list_to_list(result2) == output2)  # True
print(linked_list_to_list(result3) == output3)  # True",,0,0
3,"def length_of_longest_substring(s):
    n = len(s)
    longest = 0
    start = 0
    char_index = {}

    for i in range(n):
        if s[i] in char_index and start <= char_index[s[i]]:
            start = char_index[s[i]] + 1
        else:
            longest = max(longest, i - start + 1)
        char_index[s[i]] = i

    return longest


input1 = ""abcabcbb""
output1 = 3
input2 = ""bbbbb""
output2 = 1
input3 = ""pwwkew""
output3 = 3

print(length_of_longest_substring(input1) == output1)
print(length_of_longest_substring(input2) == output2)
print(length_of_longest_substring(input3) == output3)","True
True
True",3,0
4,"def find_median_sorted_arrays(nums1, nums2):
    m, n = len(nums1), len(nums2)
    if m > n:
        nums1, nums2, m, n = nums2, nums1, n, m
    imin, imax, half_len = 0, m, (m + n + 1) // 2
    while imin <= imax:
        i = (imin + imax) // 2
        j = half_len - i
        if i < m and nums2[j-1] > nums1[i]:
            imin = i + 1
        elif i > 0 and nums1[i-1] > nums2[j]:
            imax = i - 1
        else:
            if i == 0: max_left = nums2[j-1]
            elif j == 0: max_left = nums1[i-1]
            else: max_left = max(nums1[i-1], nums2[j-1])

            if (m + n) % 2 == 1:
                return max_left

            if i == m: min_right = nums2[j]
            elif j == n: min_right = nums1[i]
            else: min_right = min(nums1[i], nums2[j])

            return (max_left + min_right) / 2.0


# Test
nums1 = [1,3]
nums2 = [2]
output1 = find_median_sorted_arrays(nums1, nums2)

nums1 = [1,2]
nums2 = [3,4]
output2 = find_median_sorted_arrays(nums1, nums2)

nums1 = [0,0]
nums2 = [0,0]
output3 = find_median_sorted_arrays(nums1, nums2)

print(output1 == 2.00000 and output2 == 2.50000 and output3 == 0.00000)",True,1,0
5,"def longestPalindrome(s):
    n = len(s)
    if n < 2:
        return s
    dp = [[False] * n for _ in range(n)]
    for i in range(n):
        dp[i][i] = True
    max_len = 1
    start = 0
    for l in range(2, n + 1):
        for i in range(n - l + 1):
            j = i + l - 1
            if l == 2 and s[i] == s[j]:
                dp[i][j] = True
                start = i
                max_len = l
            elif s[i] == s[j] and dp[i + 1][j - 1]:
                dp[i][j] = True
                start = i
                max_len = l
    return s[start : start + max_len]


# Test the function with the provided examples
inputs = [
    ""babad"",
    ""cbbd"",
    ""a"",
]
outputs = [
    ""bab"",
    ""bb"",
    ""a"",
]

results = []
for i in range(len(inputs)):
    result = longestPalindrome(inputs[i])
    results.append(result == outputs[i])

print(results)","[False, True, True]",2,1
6,"def convert(s, numRows):
    if numRows == 1 or numRows >= len(s):
        return s
    rows = [''] * numRows
    row_index = 0
    step = 1
    for char in s:
        rows[row_index] += char
        if row_index == numRows - 1:
            step = -1
        elif row_index == 0:
            step = 1
        row_index += step
    return ''.join(rows)


# Test the function with the provided examples
input_1 = ""PAYPALISHIRING""
input_2 = ""PAYPALISHIRING""
input_3 = ""A""

output_1 = convert(input_1, 3)
output_2 = convert(input_2, 4)
output_3 = convert(input_3, 1)

print(output_1 == ""PAHNAPLSIIGYIR"")  # Expected output: True
print(output_2 == ""PINALSIGYAHRPI"")  # Expected output: True
print(output_3 == ""A"")  # Expected output: True","True
True
True",3,0
7,"def reverse_integer(x):
    """"""
    Given a signed 32-bit integer `x`, return `x` with its digits reversed. If reversing `x` causes the value to go outside the signed 32-bit integer range `[-231, 231 - 1]`, then return `0`.

    Assume the environment does not allow you to store 64-bit integers (signed or unsigned).
    """"""
    if x == 0:
        return 0
    sign = 1 if x > 0 else -1
    x = abs(x)
    reversed_x = 0
    while x > 0:
        digit = x % 10
        reversed_x = reversed_x * 10 + digit
        x //= 10
    reversed_x = sign * reversed_x
    if reversed_x < -2**31 or reversed_x > 2**31 - 1:
        return 0
    return reversed_x

# Test cases
input_1 = 123
output_1 = 321
input_2 = -123
output_2 = -321
input_3 = 120
output_3 = 21

print(reverse_integer(input_1) == output_1)  # True
print(reverse_integer(input_2) == output_2)  # True
print(reverse_integer(input_3) == output_3)  # True","True
True
True",3,0
8,"def myAtoi(s: str) -> int:
    s = s.strip()
    if len(s) == 0:
        return 0
    sign = 1
    if s[0] == '-':
        sign = -1
        s = s[1:]
    elif s[0] == '+':
        s = s[1:]
    result = 0
    for c in s:
        if not c.isdigit():
            break
        result = result * 10 + int(c)
    result *= sign
    if result > 2**31 - 1:
        return 2**31 - 1
    elif result < -2**31:
        return -2**31
    else:
        return result


assert myAtoi(""42"") == 42, 'Test 1 Failed'
assert myAtoi(""   -42"") == -42, 'Test 2 Failed'
assert myAtoi(""4193 with words"") == 4193, 'Test 3 Failed'",,0,0
9,"def isPalindrome(x):
    if x < 0:
        return False
    div = 1
    while x // div >= 10:
        div *= 10
    while x != 0:
        left = x // div
        right = x % 10
        if left != right:
            return False
        x = (x % div) // 10
        div //= 100
    return True

# Test cases
print(isPalindrome(121) == True)
print(isPalindrome(-121) == False)
print(isPalindrome(10) == False)","True
True
True",3,0
10,"import re
def isMatch(s, p):
    return re.fullmatch(p, s) is not None

# Test cases
print(isMatch(""aa"", ""a"") == False)
print(isMatch(""aa"", ""a*"") == True)
print(isMatch(""ab"", "".*"") == True)","True
True
True",3,0
11,"def maxArea(height):
    l, r = 0, len(height) - 1
    max_area = 0
    while l < r:
        current_area = min(height[l], height[r]) * (r - l)
        max_area = max(max_area, current_area)
        if height[l] < height[r]:
            l += 1
        else:
            r -= 1
    return max_area


# Test cases
input_1 = [1, 8, 6, 2, 5, 4, 8, 3, 7]
output_1 = 49
input_2 = [1, 1]
output_2 = 1
input_3 = [4, 3, 2, 1, 4]
output_3 = 16

print(True if maxArea(input_1) == output_1 else False)
print(True if maxArea(input_2) == output_2 else False)
print(True if maxArea(input_3) == output_3 else False)","True
True
True",3,0
12,"def intToRoman(num):
    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    roman = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']
    result = ''
    i = 0
    while num > 0:
        for _ in range(num // values[i]):
            result += roman[i]
            num -= values[i]
        i += 1
    return result


# Test cases
input1 = 3
output1 = ""III""
input2 = 4
output2 = ""IV""
input3 = 9
output3 = ""IX""

print(intToRoman(input1) == output1)  # True
print(intToRoman(input2) == output2)  # True
print(intToRoman(input3) == output3)  # True","True
True
True",3,0
13,"def roman_to_integer(s: str) -> int:
    roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    n = len(s)
    num = roman_map[s[n - 1]]
    for i in range(n - 2, -1, -1):
        if roman_map[s[i]] >= roman_map[s[i + 1]]:
            num += roman_map[s[i]]
        else:
            num -= roman_map[s[i]]
    return num


# Example usage and verification
input_1 = ""III""
output_1 = 3
input_2 = ""IV""
output_2 = 4
input_3 = ""IX""
output_3 = 9

print(roman_to_integer(input_1) == output_1)  # True
print(roman_to_integer(input_2) == output_2)  # True
print(roman_to_integer(input_3) == output_3)  # True","True
True
True",3,0
14,"def longestCommonPrefix(strs):
    if not strs:
        return """"

    prefix = strs[0]
    for i in range(1, len(strs)):
        j = 0
        while j < len(prefix) and j < len(strs[i]) and prefix[j] == strs[i][j]:
            j += 1
        prefix = prefix[:j]
    return prefix


# Test cases
input1 = [""flower"", ""flow"", ""flight""]
output1 = ""fl""
result1 = longestCommonPrefix(input1) == output1

input2 = [""dog"", ""racecar"", ""car""]
output2 = """"
result2 = longestCommonPrefix(input2) == output2

print({""Input 1"": input1, ""Output 1"": output1, ""Result 1"": result1, ""Input 2"": input2, ""Output 2"": output2, ""Result 2"": result2})","{'Input 1': ['flower', 'flow', 'flight'], 'Output 1': 'fl', 'Result 1': True, 'Input 2': ['dog', 'racecar', 'car'], 'Output 2': '', 'Result 2': True}",2,0
15,"def three_sum(nums):
    result = []
    nums.sort()
    for i in range(len(nums) - 2):
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        left, right = i + 1, len(nums) - 1
        while left < right:
            total = nums[i] + nums[left] + nums[right]
            if total < 0:
                left += 1
            elif total > 0:
                right -= 1
            else:
                result.append([nums[i], nums[left], nums[right]])
                while left < right and nums[left] == nums[left + 1]:
                    left += 1
                while left < right and nums[right] == nums[right - 1]:
                    right -= 1
                left += 1
                right -= 1
    return result


assert three_sum([-1, 0, 1, 2, -1, -4]) == [[-1, -1, 2], [-1, 0, 1]]
assert three_sum([]) == []
assert three_sum([0]) == []",,0,0
16,"def three_sum_closest(nums, target):
    nums.sort()
    closest_sum = float('inf')
    for i in range(len(nums) - 2):
        left = i + 1
        right = len(nums) - 1
        while left < right:
            current_sum = nums[i] + nums[left] + nums[right]
            if current_sum == target:
                return target
            if abs(current_sum - target) < abs(closest_sum - target):
                closest_sum = current_sum
            if current_sum < target:
                left += 1
            else:
                right -= 1
    return closest_sum


assert three_sum_closest([-1,2,1,-4], 1) == 2
print(True)",True,1,0
17,"def letterCombinations(digits):
    if not digits:
        return []

    mapping = {
        '2': 'abc',
        '3': 'def',
        '4': 'ghi',
        '5': 'jkl',
        '6': 'mno',
        '7': 'pqrs',
        '8': 'tuv',
        '9': 'wxyz'
    }

    result = ['']
    for digit in digits:
        temp = []
        for letter in mapping[digit]:
            for combination in result:
                temp.append(combination + letter)
        result = temp
    return result


# Test cases
input1 = ""23""
output1 = [""ad"",""ae"",""af"",""bd"",""be"",""bf"",""cd"",""ce"",""cf""]
print(letterCombinations(input1) == output1)

input2 = """"
output2 = []
print(letterCombinations(input2) == output2)

input3 = ""2""
output3 = [""a"",""b"",""c""]
print(letterCombinations(input3) == output3)","False
True
True",2,1
18,"def four_sum(nums, target):
    nums.sort()
    result = []
    n = len(nums)
    for i in range(n - 3):
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        for j in range(i + 1, n - 2):
            if j > i + 1 and nums[j] == nums[j - 1]:
                continue
            left = j + 1
            right = n - 1
            while left < right:
                total = nums[i] + nums[j] + nums[left] + nums[right]
                if total == target:
                    result.append([nums[i], nums[j], nums[left], nums[right]])
                    while left < right and nums[left] == nums[left + 1]:
                        left += 1
                    while left < right and nums[right] == nums[right - 1]:
                        right -= 1
                    left += 1
                    right -= 1
                elif total < target:
                    left += 1
                else:
                    right -= 1
    return result

# Test cases
input_1 = [1, 0, -1, 0, -2, 2]
target_1 = 0
output_1 = [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

input_2 = []
target_2 = 0
output_2 = []

# No input 3 and output 3 provided in the context

print(f'Test 1: {four_sum(input_1, target_1) == output_1}')
print(f'Test 2: {four_sum(input_2, target_2) == output_2}')","Test 1: True
Test 2: True",2,0
19,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head, n):
        dummy = ListNode(0, head)
        left = dummy
        right = head

        while n > 0 and right:
            right = right.next
            n -= 1

        while right:
            left = left.next
            right = right.next

        # Delete the node
        left.next = left.next.next
        return dummy.next


def list_to_linked_list(lst):
    if not lst:
        return None
    head = ListNode(lst[0])
    current = head
    for val in lst[1:]:
        current.next = ListNode(val)
        current = current.next
    return head

def linked_list_to_list(head):
    lst = []
    while head:
        lst.append(head.val)
        head = head.next
    return lst

# Test cases
inputs = [([1,2,3,4,5], 2), ([1], 1), ([1,2], 1)]
outputs = [[1,2,3,5], [], [1]]

# Run the code with the provided inputs and compare outputs
for i in range(len(inputs)):
    sol = Solution()
    head = list_to_linked_list(inputs[i][0])
    n = inputs[i][1]
    result = linked_list_to_list(sol.removeNthFromEnd(head, n))
    print(result == outputs[i])",,0,0
20,"def isValid(s):
    stack = []
    mapping = {')': '(', '}': '{', ']': '['}
    for char in s:
        if char in mapping:
            top_element = stack.pop() if stack else '#'
            if mapping[char] != top_element:
                return False
        else:
            stack.append(char)
    return not stack


input1 = ""()""
input2 = ""()[]{}""
input3 = ""(]""

output1 = isValid(input1)
output2 = isValid(input2)
output3 = isValid(input3)

print(output1 == True)
print(output2 == True)
print(output3 == False)","True
True
True",3,0
21,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        dummy = ListNode(0)
        tail = dummy

        while l1 and l2:
            if l1.val < l2.val:
                tail.next = l1
                l1 = l1.next
            else:
                tail.next = l2
                l2 = l2.next
            tail = tail.next

        if l1:
            tail.next = l1
        elif l2:
            tail.next = l2

        return dummy.next


def list_to_linked_list(lst):
    dummy = ListNode(0)
    tail = dummy
    for val in lst:
        tail.next = ListNode(val)
        tail = tail.next
    return dummy.next

def linked_list_to_list(head):
    lst = []
    while head:
        lst.append(head.val)
        head = head.next
    return lst

# Test cases
input_data = [
    ([1, 2, 4], [1, 3, 4]),
    ([], []),
    ([], [0])
]
output_data = [
    [1, 1, 2, 3, 4, 4],
    [],
    [0]
]

# Run the code and compare results
for i in range(len(input_data)):
    l1 = list_to_linked_list(input_data[i][0])
    l2 = list_to_linked_list(input_data[i][1])
    merged_list = Solution().mergeTwoLists(l1, l2)
    result = linked_list_to_list(merged_list)
    print(result == output_data[i])
",,0,0
22,"def generateParenthesis(n):
    result = []
    def backtrack(s, left, right):
        if len(s) == 2 * n:
            result.append(s)
            return
        if left < n:
            backtrack(s + '(', left + 1, right)
        if right < left:
            backtrack(s + ')', left, right + 1)
    backtrack('', 0, 0)
    return result


# Test cases
input1 = 3
output1 = [""((()))"",""(()())"",""(())()"",""()(())"",""()()()""]
input2 = 1
output2 = [""()""]

print({""Input 1"": input1 == input1, ""Output 1"": generateParenthesis(input1) == output1, ""Input 2"": input2 == input2, ""Output 2"": generateParenthesis(input2) == output2})","{'Input 1': True, 'Output 1': True, 'Input 2': True, 'Output 2': True}",4,0
23,"class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def mergeKLists(lists):
    if not lists:
        return None

    while len(lists) > 1:
        mergedLists = []
        for i in range(0, len(lists), 2):
            l1 = lists[i]
            l2 = lists[i + 1] if i + 1 < len(lists) else None
            mergedLists.append(mergeTwoLists(l1, l2))
        lists = mergedLists
    return lists[0]

def mergeTwoLists(l1, l2):
    dummy = ListNode(0)
    tail = dummy

    while l1 and l2:
        if l1.val < l2.val:
            tail.next = l1
            l1 = l1.next
        else:
            tail.next = l2
            l2 = l2.next
        tail = tail.next

    if l1:
        tail.next = l1
    if l2:
        tail.next = l2

    return dummy.next

def list_to_linked_list(lst):
    dummy = ListNode(0)
    current = dummy
    for val in lst:
        current.next = ListNode(val)
        current = current.next
    return dummy.next

def linked_list_to_list(head):
    lst = []
    while head:
        lst.append(head.val)
        head = head.next
    return lst


inputs = [[[1,4,5],[1,3,4],[2,6]], [], [[]]]
outputs = [[1,1,2,3,4,4,5,6], [], []]

results = []
for i in range(len(inputs)):
    input_linked_lists = [list_to_linked_list(lst) for lst in inputs[i]]
    merged_linked_list = mergeKLists(input_linked_lists)
    output_list = linked_list_to_list(merged_linked_list)
    results.append(output_list == outputs[i])

print(results) # Output: [True, True, True]","[True, True, True]",3,0
24,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def swapPairs(self, head: ListNode) -> ListNode:
        dummy = ListNode(0, head)
        prev, curr = dummy, head

        while curr and curr.next:
            # save pointers
            first_node = curr
            second_node = curr.next

            # swapping
            prev.next = second_node
            first_node.next = second_node.next
            second_node.next = first_node

            # update pointers
            prev = first_node
            curr = first_node.next
        return dummy.next

def to_linked_list(nums):
    if not nums:
        return None
    head = ListNode(nums[0])
    curr = head
    for i in range(1, len(nums)):
        curr.next = ListNode(nums[i])
        curr = curr.next
    return head

def linked_list_to_list(head):
    result = []
    while head:
        result.append(head.val)
        head = head.next
    return result

# Test cases
inputs = [[1,2,3,4], [], [1]]
outputs = [[2,1,4,3], [], [1]]

for i in range(len(inputs)):
    head = to_linked_list(inputs[i])
    result = Solution().swapPairs(head)
    result_list = linked_list_to_list(result)
    print(f'Test case {i+1}: {result_list == outputs[i]}')",,0,0
25,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        dummy = ListNode(0, head)
        groupPrev = dummy

        while True:
            kth = self.getKth(groupPrev, k)
            if not kth:
                break
            groupNext = kth.next

            # reverse group
            prev, curr = kth.next, groupPrev.next
            while curr != groupNext:
                tmp = curr.next
                curr.next = prev
                prev = curr
                curr = tmp

            # connect the reversed group
            tmp = groupPrev.next
            groupPrev.next = kth
            groupPrev = tmp

        return dummy.next

    def getKth(self, curr, k):
        while curr and k > 0:
            curr = curr.next
            k -= 1
        return curr


# Test Cases
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def create_linked_list(arr):
    head = None
    tail = None
    for val in arr:
        if head is None:
            head = ListNode(val)
            tail = head
        else:
            tail.next = ListNode(val)
            tail = tail.next
    return head

def compare_linked_lists(l1, l2):
    while l1 and l2:
        if l1.val != l2.val:
            return False
        l1 = l1.next
        l2 = l2.next
    return l1 is None and l2 is None

solution = Solution()

# Input 1
input_head_1 = create_linked_list([1, 2, 3, 4, 5])
input_k_1 = 2
expected_output_1 = create_linked_list([2, 1, 4, 3, 5])
output_1 = solution.reverseKGroup(input_head_1, input_k_1)
print(compare_linked_lists(output_1, expected_output_1))  # True

# Input 2
input_head_2 = create_linked_list([1, 2, 3, 4, 5])
input_k_2 = 3
expected_output_2 = create_linked_list([3, 2, 1, 4, 5])
output_2 = solution.reverseKGroup(input_head_2, input_k_2)
print(compare_linked_lists(output_2, expected_output_2))  # True

# Input 3
input_head_3 = create_linked_list([1, 2, 3, 4, 5])
input_k_3 = 1
expected_output_3 = create_linked_list([1, 2, 3, 4, 5])
output_3 = solution.reverseKGroup(input_head_3, input_k_3)
print(compare_linked_lists(output_3, expected_output_3))  # True",,0,0
