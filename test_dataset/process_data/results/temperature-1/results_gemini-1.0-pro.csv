ID,code,result,true_count,false_count
1,"def twoSum(nums, target):
    hashtable = {}
    for i in range(len(nums)):
        complement = target - nums[i]
        if complement in hashtable:
            return [hashtable[complement], i]
        hashtable[nums[i]] = i
    return None

nums = [2,7,11,15]
target = 9
print(twoSum(nums, target))

nums = [3,3]
target = 6","[0, 1]",0,0
2,"def addTwoNumbers(l1, l2):
  carry = 0
  result = current = ListNode(0)

  while l1 or l2 or carry:
    	if l1:
      carry += l1.val
      l1 = l1.next

    	if l2:
      carry += l2.val
      l2 = l2.next

    	current.next = ListNode(carry % 10)
    	carry //= 10
    	current = current.next

  return result.next",,0,0
3,"def lengthOfLongestSubstring(s):
    max_length = 0
    start = 0
    end = 0
    char_index_map = {}

    while end < len(s):
        if s[end] in char_index_map and char_index_map[s[end]] >= start:
            start = char_index_map[s[end]] + 1
        char_index_map[s[end]] = end
        max_length = max(max_length, end - start + 1)
        end += 1

    return max_length",,0,0
4,"def findMedianSortedArrays(nums1, nums2):
  m, n = len(nums1), len(nums2)
  p1, p2 = 0, 0  # pointers for nums1 and nums2
  merged = []
  while p1 < m and p2 < n:
    if nums1[p1] < nums2[p2]:
      merged.append(nums1[p1])
      p1 += 1
    else:
      merged.append(nums2[p2])
      p2 += 1
  merged.extend(nums1[p1:])  # append the remaining elements of nums1
  merged.extend(nums2[p2:])  # append the remaining elements of nums2
  mid = (len(merged) - 1) // 2
  if len(merged) % 2 == 1:  # odd number of elements
    return merged[mid]
  else:  # even number of elements
    return (merged[mid] + merged[mid + 1]) / 2

# Example 1
nums1 = [1, 3]
nums2 = [2]
result = findMedianSortedArrays(nums1, nums2)
print(result)  # Output: 2.0

# Example 2
nums1 = [1, 2]
nums2 = [3, 4]
result = findMedianSortedArrays(nums1, nums2)
print(result)  # Output: 2.5

# Example 3
nums1 = [0, 0]
nums2 = [0, 0]
result = findMedianSortedArrays(nums1, nums2)
print(result)  # Output: 0.0","2
2.5
0.0",0,0
5,"def longestPalindrome(s: str) -> str:
    if not s:
        return""""
    start = 0
    end = 0
    for i in range(len(s)):
        l, r = i, i
        while l >= 0 and r < len(s) and s[l] == s[r]:
            if r - l + 1 > end - start:
                start, end = l, r
        l, r = i, i + 1
        while l >= 0 and r < len(s) and s[l] == s[r]:
            if r - l + 1 > end - start:
                start, end = l, r",,0,0
6,"def convert(s, numRows):
    if numRows == 1 or numRows >= len(s):
        return s
    rows = [""""] * numRows
    curr_row = 0
    going_down = False
    for c in s:
        rows[curr_row] += c
        if curr_row == 0 or curr_row == numRows - 1:
            going_down = not going_down
        curr_row += 1 if going_down else -1
    return ''.join(rows)
s = ""PAYPALISHIRING""
n = 3
result = convert(s, n)
print(result)",PAHNAPLSIIGYIR,0,0
7,"def reverse(x: int) -> int:
    """"""Given a signed 32-bit integer `x`, return `x` with its digits reversed. If reversing `x` causes the value to go outside the signed 32-bit integer range `[-231, 231 - 1]`, then return 0.""""""
    INT_MAX = (1 << 31) - 1
    INT_MIN = -INT_MAX - 1

    reversed_integer = 0
    if x < 0:
        reversed_integer = -x
        x = abs(x)

    while(x):
        reversed_integer = (reversed_integer * 10) + x % 10
        x //= 10

    if reversed_integer > INT_MAX or reversed_integer < INT_MIN:
        return 0

    return -reversed_integer if reversed_integer < 0 else reversed_integer

input_1 = 123
output_1 = reverse(input_1)
print(output_1)
input_2 = -123
output_2 = reverse(input_2)
print(output_2)
input_3 = 120
output_3 = reverse(input_3)","321
123321",0,0
8,"def myAtoi(s: str) -> int:
    s = s.strip()
    if not s or s[0] not in {'-', '+', str(i) for i in range(10)}:
        return 0
    sign = -1 if s[0] == '-' else 1
    if s[0] in {'-', '+'}: s = s[1:]
    num = 0
    for c in s:
        if not c.isdigit(): break
        num = num * 10 + int(c)
    num *= sign
    if num < -2 ** 31: return -2 ** 31
    if num > 2 ** 31 - 1: return 2 ** 31 - 1
    return num",,0,0
9,"def is_palindrome(x: int) -> bool:
  """"""Given an integer `x`, return `true` if `x` is palindrome integer.

A integer is a palindrome when it reads the same backward as forward. For example, `121` is palindrome while `123` is not.

  Args:
      x (int): The integer to check.

  Returns:
      bool: `True` if `x` is a palindrome, `False` otherwise.
  """"""
  # Special cases:
  if x < 0:
    return False
  if x == 0:
    return True
  if x % 10 == 0:
    return False

  reversed_x = 0
  while x > reversed_x:
    reversed_x = reversed_x * 10 + x % 10
    x //= 10

  return x == reversed_x or x == reversed_x // 10


# Example 1:
input_1 = 121
output_1 = is_palindrome(input_1)
print(output_1)  # Output: True

# Example 2:
input_2 = -121
output_2 = is_palindrome(input_2)
print(output_2)  # Output: False

# Example 3:
input_3 = 10
output_3 = is_palindrome(input_3)
print(output_3)  # Output: False","True
False
False",1,2
10,"def isMatch(s, p):
    memo = {}
    def dp(i, j):
        if (i, j) in memo:
            return memo[(i, j)]
        if j == len(p):
            return i == len(s)
        if p[j + 1] != '*':
            memo[(i, j)] = (i < len(s) and (s[i] == p[j] or p[j] == '.')) and dp(i + 1, j + 1)
            return memo[(i, j)]
        else:
            res = dp(i, j + 2) or (i < len(s) and (s[i] == p[j] or p[j] == '.') and dp(i + 1, j))
            memo[(i, j)] = res
            return res
    return dp(0, 0)",,0,0
11,"def maxArea(height):
    l, r = 0, len(height) - 1
    max_area = 0

    while l < r:
        max_area = max(max_area, (r - l) * min(height[l], height[r]))
        if height[l] < height[r]:
            l += 1
        else:
            r -= 1
    return max_area",,0,0
12,"

def int_to_roman(num : int) -> str:  
  values = [  
      1000, 900, 500, 400, 100,  
      90, 50, 40, 10, 9, 5, 4, 1  
  ]  
  roman = [  
      ""M"", ""CM"", ""D"", ""CD"", ""C"",  
      ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""  
  ]  
  roman_num = """"  
  i = 0  
  while num > 0:  
      for _ in range(num // values[i]):  
          roman_num += roman[i]  
          num -= values[i]  
      i += 1  
  return roman_num  


print(int_to_roman(1993))  
print(int_to_roman(3))  
print(int_to_roman(4))  
print(int_to_roman(9))  
print(int_to_roman(58))  
print(int_to_roman(1994))  ","MCMXCIII
III
IV
IX
LVIII
MCMXCIV",0,0
13,"def roman_to_int(s: str) -> int:
    roman_dict = {
        'I': 1,
        'V': 5,
        'X': 10,
        'L': 50,
        'C': 100,
        'D': 500,
        'M': 1000
    }

    result = 0
    prev_value = 0

    for char in s[::-1]:
        value = roman_dict[char]

        if value < prev_value:
            result -= value
        else:
            result += value
        prev_value = value

    return result


inputs = [""III"", ""IV"", ""IX"", ""LVIII"", ""MCMXCIV""]
outputs = [3, 4, 9, 58, 1994]

for i, input_value in enumerate(inputs):
    output_value = roman_to_int(input_value)
    print(f""Input {i+1}: {input_value}"")
    print(f""Output {i+1}: {output_value}"")
    print(f""Correct: {output_value == outputs[i]}

"")
",,0,0
14,"def longestCommonPrefix(strs):
    prefix = """"
    if len(strs) == 0:
        return prefix
    for i in range(len(min(strs))):
        c = strs[0][i]
        if all(s[i] == c for s in strs):
            prefix += c
        else:
            break",,0,0
15,"def threeSum(nums):
        
    result = []
    nums.sort()
    
    for i, v in enumerate(nums):
        if i > 0 and v == nums[i - 1]:
            continue
            
        l, r = i + 1, len(nums) - 1
        while l < r:
            s = v + nums[l] + nums[r]
            if s > 0:
                r -= 1
            elif s < 0:
                l += 1
            else:
                result.append([v, nums[l], nums[r]])
                l += 1
                while nums[l] == nums[l - 1] and l < r:
                    l += 1
    return result",,0,0
16,"def threeSumClosest(nums, target):
    """"""  
    Given an array \""nums\"" of n integers and an integer \""target\"", find three integers in \""nums\"" such that the sum is closest to \""target\"". Return the sum of the three integers. You may assume that each input would have exactly one solution.

    Example 1:
    Input: nums = [-1,2,1,-4], target = 1
    Output: 2
    Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
    
    Constraints:
    3 <= nums.length <= 10^3
    -10^3 <= nums[i] <= 10^3
    -10^4 <= target <= 10^4

    ""  
    nums.sort()
    result = nums[0]+nums[1]+nums[2]
    for i in range(len(nums)-2):
        left , right = i+1,len(nums)-1
        while left<right:
            current_sum = nums[left] + nums[right] + nums[i]
            if abs(target-current_sum)<abs(target-result):
                result=current_sum
            if current_sum<target:
                left+=1
            else:
                right-=1
    return result

# Example 1:
nums1 = [-1, 2, 1, -4]
target1 = 1 
result1 = threeSumClosest(nums1,target1)  

# Example 2:
nums2 = [1, 1, -1, -1, 3]
target2 = -1 
result2 = threeSumClosest(nums2,target2) 

# Example 3:
nums3 = [0, 2, 1, -3]
target3 = 1
result3 = threeSumClosest(nums3,target3) 

print(""Result 1:"", result1)
print(""Result 2:"", result2)
print(""Result 3:"", result3)

assert result1 == 2
assert result2 == -1
assert result3 == 0",,0,0
17,"def letterCombinations(digits):
    if not digits:
        return []

    mapping = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}
    result = ['' for _ in range(len(digits))]

    def backtrack(index):
        if index == len(digits):
            output.append(''.join(result))
            return

        for char in mapping[digits[index]]:
            result[index] = char
            backtrack(index + 1)

    output = []
    backtrack(0)
    return output",,0,0
18,"Got invalid JSON object. Error: Expecting ',' delimiter: line 2 column 133 (char 134)",ERROR,ERROR,ERROR
19,"def removeNthFromEnd(head, n):
    dummy = ListNode(0, head)
    first = head
    second = dummy
    for _ in range(n):
        first = first.next
    while first:
        first = first.next
        second = second.next
    second.next = second.next.next
    return dummy.next

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next",,0,0
20,"def is_valid(s: str) -> bool:
    stack = []
    mapping = {')': '(', '}': '{', ']': '['}
    for char in s:
        if char in mapping:  
            top_element = stack.pop() if stack else '#'
            if mapping[char] != top_element:
                return False
        else:
            stack.append(char)
    return not stack

print(is_valid(""()[]{}""))
print(is_valid(""([)]""))
print(is_valid(""(]""))","True
False
False",1,2
21,"def mergeTwoLists(l1, l2):
	if not l1 or not l2:
		return l1 if not l2 else l2
	if l1.val < l2.val:
		ret = l1
		ret.next = mergeTwoLists(l1.next, l2)
	else:
		ret = l2
		ret.next = mergeTwoLists(l1, l2.next)
	return ret",,0,0
22,"def generateParenthesis(self, n: int) -> List[str]:
    def backtrack(S: str, left: int, right: int) -> int:
        if len(S) == n * 2:
            result.append(S)
            return
        if left < n:
            backtrack(S + '(', left + 1, right)
        if right < left:
            backtrack(S + ')', left, right + 1)

    result = []
    backtrack('', 0, 0)
    return result
",,0,0
23,"def mergeKLists(lists

    if not lists or len(lists) == 0:
        return None

    while len(lists) > 1:
        mergedList1 = mergeTwoLists(lists[0], lists[1])
        lists.pop(0)
        lists.pop(0)
        lists.insert(0, mergedList1)

    return lists[0]


def mergeTwoLists(l1, l2):
        if not l1 or not l2:
           return l1 or l2
         
        if l1.val < l2.val:
           l1.next = mergeTwoLists(l1.next, l2)
           return l1
        else:
           l2.next = mergeTwoLists(l1, l2.next)
           return l2",,0,0
24,"def swapPairs(head):
      dummy = ListNode()
      dummy.next = head
      prev = dummy
      
      while head and head.next:
            nextPair = head.next.next
            second = head.next
            second.next = head
            head.next = nextPair
            prev.next = second
            prev = head
            head = nextPair
      return dummy.next",,0,0
25,"class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def reverseKGroup(head, k):
    if not head or k == 1:
        return head

    dummy = ListNode(0, head)
    prev = dummy
    curr = head

    while curr:
        group_prev = prev
        group_next = None
        count = 0

        while curr and count < k:
            group_next = curr.next
            curr.next = prev
            prev = curr
            curr = group_next
            count += 1

        if count == k:
            group_prev.next = prev
            prev = group_next

    return dummy.next     ",,0,0
