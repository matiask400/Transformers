ID,code,result,true_count,false_count
1,"def two_sum(nums, target):
    num_indices = {}
    for index, num in enumerate(nums):
        complement = target - num
        if complement in num_indices:
            return [num_indices[complement], index]
        num_indices[num] = index


# Input 1
nums1 = [2, 7, 11, 15]
target1 = 9
output1 = [0, 1]

# Input 2
nums2 = [3, 2, 4]
target2 = 6
output2 = [1, 2]

# Input 3
nums3 = [3, 3]
target3 = 6
output3 = [0, 1]

print(f'{two_sum(nums1,target1) == output1}')
print(f'{two_sum(nums2,target2) == output2}')
print(f'{two_sum(nums3,target3) == output3}')","True
True
True",3,0
2,"# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def addTwoNumbers(l1, l2):
    dummy = ListNode(0)
    curr = dummy
    carry = 0

    while l1 or l2 or carry:
        val1 = l1.val if l1 else 0
        val2 = l2.val if l2 else 0

        total = val1 + val2 + carry
        carry = total // 10
        curr.next = ListNode(total % 10)

        curr = curr.next
        l1 = l1.next if l1 else None
        l2 = l2.next if l2 else None

    return dummy.next

def list_to_linked_list(lst):
    dummy = ListNode(0)
    curr = dummy
    for val in lst:
        curr.next = ListNode(val)
        curr = curr.next
    return dummy.next

def linked_list_to_list(head):
    lst = []
    curr = head
    while curr:
        lst.append(curr.val)
        curr = curr.next
    return lst

# Example usage
input1_l1 = list_to_linked_list([2, 4, 3])
input1_l2 = list_to_linked_list([5, 6, 4])
output1 = linked_list_to_list(addTwoNumbers(input1_l1, input1_l2))  # Output: [7, 0, 8]

input2_l1 = list_to_linked_list([0])
input2_l2 = list_to_linked_list([0])
output2 = linked_list_to_list(addTwoNumbers(input2_l1, input2_l2))  # Output: [0]

input3_l1 = list_to_linked_list([9, 9, 9, 9, 9, 9, 9])
input3_l2 = list_to_linked_list([9, 9, 9, 9])
output3 = linked_list_to_list(addTwoNumbers(input3_l1, input3_l2))  # Output: [8, 9, 9, 9, 0, 0, 0, 1]

print([7, 0, 8] == output1)
print([0] == output2)
print([8, 9, 9, 9, 0, 0, 0, 1] == output3)","True
True
True",3,0
3,"def length_of_longest_substring(s):
    n = len(s)
    longest = 0
    for i in range(n):
        seen = set()
        j = i
        while j < n and s[j] not in seen:
            seen.add(s[j])
            j += 1
        longest = max(longest, j - i)
    return longest


# Test Cases
input1 = ""abcabcbb""
output1 = 3
input2 = ""bbbbb""
output2 = 1
input3 = ""pwwkew""
output3 = 3

print(length_of_longest_substring(input1) == output1)
print(length_of_longest_substring(input2) == output2)
print(length_of_longest_substring(input3) == output3)","True
True
True",3,0
4,"import statistics
def find_median_sorted_arrays(nums1, nums2):
    merged_array = sorted(nums1 + nums2)
    return statistics.median(merged_array)

# Test Cases
input_1 = ([1, 3], [2])
output_1 = 2.00000
input_2 = ([1, 2], [3, 4])
output_2 = 2.50000
input_3 = ([0, 0], [0, 0])
output_3 = 0.00000

print(find_median_sorted_arrays(*input_1) == output_1)  # True
print(find_median_sorted_arrays(*input_2) == output_2)  # True
print(find_median_sorted_arrays(*input_3) == output_3)  # True","True
True
True",3,0
5,"def longestPalindrome(s):
    n = len(s)
    if n < 2:
        return s
    dp = [[False] * n for _ in range(n)]
    for i in range(n):
        dp[i][i] = True
    max_len = 1
    start = 0
    for l in range(2, n + 1):
        for i in range(n - l + 1):
            j = i + l - 1
            if l == 2 and s[i] == s[j]:
                dp[i][j] = True
                start = i
                max_len = l
            elif s[i] == s[j] and dp[i + 1][j - 1]:
                dp[i][j] = True
                start = i
                max_len = l
    return s[start:start + max_len]


# Test the function with the provided examples
print(longestPalindrome(""babad"") == ""bab"" or longestPalindrome(""babad"") == ""aba"")  # Example 1. Should return True
print(longestPalindrome(""cbbd"") == ""bb"")  # Example 2. Should return True
print(longestPalindrome(""a"") == ""a"")  # Example 3. Should return True","True
True
True",3,0
6,"def convert(s, numRows):
    if numRows == 1 or numRows >= len(s):
        return s
    rows = [''] * numRows
    row, step = 0, 1
    for char in s:
        rows[row] += char
        if row == numRows - 1:
            step = -1
        elif row == 0:
            step = 1
        row += step
    return ''.join(rows)


# Test cases
input1 = ""PAYPALISHIRING""
input2 = ""PAYPALISHIRING""
input3 = ""A""
output1 = ""PAHNAPLSIIGYIR""
output2 = ""PINALSIGYAHRPI""
output3 = ""A""

print(convert(input1, 3) == output1)
print(convert(input2, 4) == output2)
print(convert(input3, 1) == output3)","True
True
True",3,0
7,"def reverse_integer(x):
    """"""
    Given a signed 32-bit integer `x`, return `x` with its digits reversed. If reversing `x` causes the value to go outside the signed 32-bit integer range `[-231, 231 - 1]`, then return `0`.

    Assume the environment does not allow you to store 64-bit integers (signed or unsigned).
    """"""
    if x == 0:
        return 0
    sign = 1 if x > 0 else -1
    x = abs(x)
    reversed_x = 0
    while x > 0:
        digit = x % 10
        reversed_x = reversed_x * 10 + digit
        x //= 10
    reversed_x = sign * reversed_x
    if reversed_x < -2**31 or reversed_x > 2**31 - 1:
        return 0
    return reversed_x

# Test cases
input_1 = 123
output_1 = 321
input_2 = -123
output_2 = -321
input_3 = 120
output_3 = 21

print(reverse_integer(input_1) == output_1)  # True
print(reverse_integer(input_2) == output_2)  # True
print(reverse_integer(input_3) == output_3)  # True","True
True
True",3,0
8,"def myAtoi(s):
    s = s.strip()
    if not s:
        return 0

    sign = 1
    if s[0] == '-':
        sign = -1
        s = s[1:]
    elif s[0] == '+':
        s = s[1:]

    result = 0
    for c in s:
        if not c.isdigit():
            break
        result = result * 10 + int(c)

    result = sign * result
    return max(min(result, 2**31 - 1), -2**31)


# Test cases
inputs = [
    ""42"",
    ""   -42"",
    ""4193 with words""
]
outputs = [
    42,
    -42,
    4193
]

for i in range(len(inputs)):
    result = myAtoi(inputs[i])
    print(result == outputs[i])","True
True
True",3,0
9,"def isPalindrome(x):
    if x < 0:
        return False
    div = 1
    while x // div >= 10:
        div *= 10
    while x != 0:
        left = x // div
        right = x % 10
        if left != right:
            return False
        x = (x % div) // 10
        div //= 100
    return True

print(isPalindrome(121) == True)
print(isPalindrome(-121) == False)
print(isPalindrome(10) == False)","True
True
True",3,0
10,"def isMatch(s, p):
    dp = [[False for _ in range(len(p) + 1)] for _ in range(len(s) + 1)]
    dp[0][0] = True
    for j in range(1, len(p) + 1):
        if p[j - 1] == '*':
            dp[0][j] = dp[0][j - 2]
    for i in range(1, len(s) + 1):
        for j in range(1, len(p) + 1):
            if p[j - 1] == '.' or p[j - 1] == s[i - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            elif p[j - 1] == '*':
                dp[i][j] = dp[i][j - 2]
                if p[j - 2] == '.' or p[j - 2] == s[i - 1]:
                    dp[i][j] = dp[i][j] or dp[i - 1][j]
            else:
                dp[i][j] = False
    return dp[-1][-1]


print(isMatch(""aa"", ""a"") == False)
print(isMatch(""aa"", ""a*"") == True)
print(isMatch(""ab"", "".*"") == True)","True
True
True",3,0
11,"def maxArea(height):
    l, r = 0, len(height) - 1
    max_area = 0
    while l < r:
        current_area = min(height[l], height[r]) * (r - l)
        max_area = max(max_area, current_area)
        if height[l] < height[r]:
            l += 1
        else:
            r -= 1
    return max_area


assert maxArea([1,8,6,2,5,4,8,3,7]) == 49
assert maxArea([1,1]) == 1
assert maxArea([4,3,2,1,4]) == 16
assert maxArea([1,2,1]) == 2",,0,0
12,"def intToRoman(num):
    values = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ]
    roman = [ ""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I"" ]
    roman_num = ''
    i = 0
    while num > 0:
        for _ in range(num // values[i]):
            roman_num += roman[i]
            num -= values[i]
        i += 1
    return roman_num


# Test cases
input1 = 3
output1 = ""III""
input2 = 4
output2 = ""IV""
input3 = 9
output3 = ""IX""

print(f'Input 1: {input1}, Output 1: {output1}, Result: {intToRoman(input1) == output1}')
print(f'Input 2: {input2}, Output 2: {output2}, Result: {intToRoman(input2) == output2}')
print(f'Input 3: {input3}, Output 3: {output3}, Result: {intToRoman(input3) == output3}')","Input 1: 3, Output 1: III, Result: True
Input 2: 4, Output 2: IV, Result: True
Input 3: 9, Output 3: IX, Result: True",3,0
13,"def roman_to_integer(s):
    roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    n = len(s)
    num = roman_map[s[n - 1]]
    for i in range(n - 2, -1, -1):
        if roman_map[s[i]] >= roman_map[s[i + 1]]:
            num += roman_map[s[i]]
        else:
            num -= roman_map[s[i]]
    return num


# Test cases
input1 = ""III""
output1 = 3
input2 = ""IV""
output2 = 4
input3 = ""IX""
output3 = 9

print(roman_to_integer(input1) == output1)  # True
print(roman_to_integer(input2) == output2)  # True
print(roman_to_integer(input3) == output3)  # True","True
True
True",3,0
14,"def longestCommonPrefix(strs):
    if not strs:
        return """"

    prefix = strs[0]
    for i in range(1, len(strs)):
        j = 0
        while j < len(prefix) and j < len(strs[i]) and prefix[j] == strs[i][j]:
            j += 1
        prefix = prefix[:j]

    return prefix


# test

input1 = [""flower"",""flow"",""flight""] 
output1 = ""fl""
input2 = [""dog"",""racecar"",""car""]
output2 = """"

print({""input 1"": str(input1) == str([""flower"",""flow"",""flight""]),
        ""output 1"": str(longestCommonPrefix(input1)) == str(output1),
        ""input 2"": str(input2) == str([""dog"",""racecar"",""car""]),
        ""output 2"": str(longestCommonPrefix(input2)) == str(output2)
        })","{'input 1': True, 'output 1': True, 'input 2': True, 'output 2': True}",4,0
15,"def three_sum(nums):
    result = []
    nums.sort()
    for i in range(len(nums) - 2):
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        left, right = i + 1, len(nums) - 1
        while left < right:
            total = nums[i] + nums[left] + nums[right]
            if total < 0:
                left += 1
            elif total > 0:
                right -= 1
            else:
                result.append([nums[i], nums[left], nums[right]])
                while left < right and nums[left] == nums[left + 1]:
                    left += 1
                while left < right and nums[right] == nums[right - 1]:
                    right -= 1
                left += 1
                right -= 1
    return result


if __name__ == '__main__':
    input1 = [-1, 0, 1, 2, -1, -4]
    output1 = [[-1, -1, 2], [-1, 0, 1]]
    input2 = []
    output2 = []
    input3 = [0]
    output3 = []

    print(f'Test 1: {three_sum(input1) == output1}')
    print(f'Test 2: {three_sum(input2) == output2}')
    print(f'Test 3: {three_sum(input3) == output3}')","Test 1: True
Test 2: True
Test 3: True",3,0
16,"def three_sum_closest(nums, target):
    nums.sort()
    closest_sum = float('inf')
    
    for i in range(len(nums) - 2):
        left = i + 1
        right = len(nums) - 1
        
        while left < right:
            current_sum = nums[i] + nums[left] + nums[right]
            
            if current_sum == target:
                return target
            
            if abs(current_sum - target) < abs(closest_sum - target):
                closest_sum = current_sum
            
            if current_sum < target:
                left += 1
            else:
                right -= 1
    
    return closest_sum


nums1 = [-1,2,1,-4]
target1 = 1
output1 = three_sum_closest(nums1, target1)

print(f'Input 1: {nums1}, {target1}')
print(f'Output 1: {output1}')
print(f'Expected Output 1: 2')
print(f'Test 1 Passed: {output1 == 2}')","Input 1: [-4, -1, 1, 2], 1
Output 1: 2
Expected Output 1: 2
Test 1 Passed: True",1,0
17,"from typing import List
def letterCombinations(digits: str) -> List[str]:
    if not digits:
        return []

    digit_to_letters = {
        '2': 'abc',
        '3': 'def',
        '4': 'ghi',
        '5': 'jkl',
        '6': 'mno',
        '7': 'pqrs',
        '8': 'tuv',
        '9': 'wxyz'
    }

    result = ['']
    for digit in digits:
        temp = []
        for letter in digit_to_letters[digit]:
            for combination in result:
                temp.append(combination + letter)
        result = temp
    return result

# Test cases
input1 = ""23""
output1 = [""ad"",""ae"",""af"",""bd"",""be"",""bf"",""cd"",""ce"",""cf""]

input2 = """"
output2 = []

input3 = ""2""
output3 = [""a"",""b"",""c""]

print(letterCombinations(input1) == output1)  # True
print(letterCombinations(input2) == output2)  # True
print(letterCombinations(input3) == output3)  # True","False
True
True",2,1
18,"def fourSum(nums, target):
    nums.sort()
    n = len(nums)
    result = []

    for i in range(n - 3):
        # Skip duplicate numbers for the first element
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        for j in range(i + 1, n - 2):
            # Skip duplicate numbers for the second element
            if j > i + 1 and nums[j] == nums[j - 1]:
                continue
            left, right = j + 1, n - 1
            while left < right:
                current_sum = nums[i] + nums[j] + nums[left] + nums[right]
                if current_sum == target:
                    result.append([nums[i], nums[j], nums[left], nums[right]])
                    left += 1
                    right -= 1
                    # Skip duplicate numbers for the third element
                    while left < right and nums[left] == nums[left - 1]:
                        left += 1
                    # Skip duplicate numbers for the fourth element
                    while left < right and nums[right] == nums[right + 1]:
                        right -= 1
                elif current_sum < target:
                    left += 1
                else:
                    right -= 1
    return result


test_cases = [([1, 0, -1, 0, -2, 2], 0, [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]),
              ([], 0, []),
              ]

for case in test_cases:
    nums, target, expected = case
    result = fourSum(nums, target)
    print(result == expected)","True
True",2,0
19,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head, n):
        dummy = ListNode(0, head)
        left = dummy
        right = head

        while n > 0 and right:
            right = right.next
            n -= 1

        while right:
            left = left.next
            right = right.next

        # Delete the node
        left.next = left.next.next

        return dummy.next

def list_to_linked_list(lst):
    if not lst:
        return None
    head = ListNode(lst[0])
    current = head
    for val in lst[1:]:
        current.next = ListNode(val)
        current = current.next
    return head

def linked_list_to_list(head):
    lst = []
    while head:
        lst.append(head.val)
        head = head.next
    return lst

# Test cases
inputs = [([1,2,3,4,5], 2), ([1], 1), ([1,2], 1)]
outputs = [[1,2,3,5], [], [1]]

solution = Solution()
for i in range(len(inputs)):
    head = list_to_linked_list(inputs[i][0])
    n = inputs[i][1]
    result_head = solution.removeNthFromEnd(head, n)
    result = linked_list_to_list(result_head)
    print(result == outputs[i])",,0,0
20,"def isValid(s):
    stack = []
    brackets = {"")"": ""("", ""]"": ""["", ""}"": ""{""}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if stack and brackets[char] == stack[-1]:
                stack.pop()
            else:
                return False
        else:
            return False
    return len(stack) == 0


# test
print(isValid(""()"") == True)
print(isValid(""()[]{}"") == True)
print(isValid(""(]"") == False)","True
True
True",3,0
21,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        dummy = ListNode()
        tail = dummy
        
        while l1 and l2:
            if l1.val < l2.val:
                tail.next = l1
                l1 = l1.next
            else:
                tail.next = l2
                l2 = l2.next
            tail = tail.next
            
        if l1:
            tail.next = l1
        elif l2:
            tail.next = l2
        
        return dummy.next

def list_to_linked_list(lst):
    dummy = ListNode()
    tail = dummy
    for val in lst:
        tail.next = ListNode(val)
        tail = tail.next
    return dummy.next

def linked_list_to_list(head):
    lst = []
    while head:
        lst.append(head.val)
        head = head.next
    return lst

# Test

# Example 1
l1 = list_to_linked_list([1, 2, 4])
l2 = list_to_linked_list([1, 3, 4])
expected_output1 = [1, 1, 2, 3, 4, 4]

# Example 2
l1 = list_to_linked_list([])
l2 = list_to_linked_list([])
expected_output2 = []

# Example 3
l1 = list_to_linked_list([])
l2 = list_to_linked_list([0])
expected_output3 = [0]

solution = Solution()
output1 = linked_list_to_list(solution.mergeTwoLists(l1, l2))
output2 = linked_list_to_list(solution.mergeTwoLists(l1, l2))
output3 = linked_list_to_list(solution.mergeTwoLists(l1, l2))

print(output1 == expected_output1, output2 == expected_output2, output3 == expected_output3)",,0,0
22,"def generateParenthesis(n):
    result = []

    def backtrack(s, left, right):
        if len(s) == 2 * n:
            result.append(s)
            return

        if left < n:
            backtrack(s + '(', left + 1, right)
        if right < left:
            backtrack(s + ')', left, right + 1)

    backtrack('', 0, 0)
    return result


# Test cases
input1 = 3
output1 = [""((()))"",""(()())"",""(())()"",""()(())"",""()()()""]
input2 = 1
output2 = [""()""]

assert generateParenthesis(input1) == output1, 'Test 1 Failed'
assert generateParenthesis(input2) == output2, 'Test 2 Failed'
print('All tests passed!')",All tests passed!,0,0
23,"# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
class Solution:
    def mergeKLists(self, lists):
        if not lists:
            return None
        if len(lists) == 1:
            return lists[0]
        mid = len(lists) // 2
        left = self.mergeKLists(lists[:mid])
        right = self.mergeKLists(lists[mid:])
        return self.mergeTwoLists(left, right)

    def mergeTwoLists(self, l1, l2):
        dummy = ListNode(0)
        curr = dummy
        while l1 and l2:
            if l1.val <= l2.val:
                curr.next = l1
                l1 = l1.next
            else:
                curr.next = l2
                l2 = l2.next
            curr = curr.next
        if l1:
            curr.next = l1
        if l2:
            curr.next = l2
        return dummy.next

def list_to_linked_list(lst):
    dummy = ListNode(0)
    curr = dummy
    for val in lst:
        curr.next = ListNode(val)
        curr = curr.next
    return dummy.next

def linked_list_to_list(head):
    lst = []
    curr = head
    while curr:
        lst.append(curr.val)
        curr = curr.next
    return lst

# Example usage
input1 = [[1,4,5],[1,3,4],[2,6]]
input2 = []
input3 = [[]]

# Convert input lists to linked lists
for i in range(len(input1)):
    input1[i] = list_to_linked_list(input1[i])
input2 = list_to_linked_list(input2)
input3 = list_to_linked_list(input3)

solution = Solution()

output1 = solution.mergeKLists(input1)
output2 = solution.mergeKLists(input2)
output3 = solution.mergeKLists(input3)

# Convert output linked lists to lists
output1 = linked_list_to_list(output1)
output2 = linked_list_to_list(output2)
output3 = linked_list_to_list(output3)

print(output1 == [1,1,2,3,4,4,5,6]) # True
print(output2 == []) # True
print(output3 == []) # True",,0,0
24,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def swapPairs(self, head):
        dummy = ListNode(0, head)
        prev, curr = dummy, head
        while curr and curr.next:
            # Save pointers
            nxtPair = curr.next.next
            second = curr.next

            # Reverse this pair
            second.next = curr
            curr.next = nxtPair
            prev.next = second

            # Update pointers
            prev = curr
            curr = nxtPair
        return dummy.next


def list_to_linked_list(lst):
    if not lst:
        return None
    head = ListNode(lst[0])
    curr = head
    for val in lst[1:]:
        curr.next = ListNode(val)
        curr = curr.next
    return head

def linked_list_to_list(head):
    lst = []
    curr = head
    while curr:
        lst.append(curr.val)
        curr = curr.next
    return lst

# Test cases
inputs = [[1,2,3,4], [], [1]]
outputs = [[2,1,4,3], [], [1]]

for i in range(len(inputs)):
    head = list_to_linked_list(inputs[i])
    result = Solution().swapPairs(head)
    output = linked_list_to_list(result)
    print(output == outputs[i])",,0,0
25,"class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def reverseKGroup(head, k):
    dummy = ListNode(0, head)
    groupPrev = dummy

    while True:
        kth = getKth(groupPrev, k)
        if not kth:
            break
        groupNext = kth.next

        # reverse group
        prev, curr = kth.next, groupPrev.next
        while curr != groupNext:
            tmp = curr.next
            curr.next = prev
            prev = curr
            curr = tmp

        # connect with previous and next groups
        tmp = groupPrev.next
        groupPrev.next = kth
        groupPrev = tmp

    return dummy.next

def getKth(curr, k):
    while curr and k > 0:
        curr = curr.next
        k -= 1
    return curr

def createLinkedList(values):
    if not values:
        return None
    head = ListNode(values[0])
    curr = head
    for i in range(1, len(values)):
        curr.next = ListNode(values[i])
        curr = curr.next
    return head

def linkedListToValues(head):
    values = []
    curr = head
    while curr:
        values.append(curr.val)
        curr = curr.next
    return values


inputs = [([1,2,3,4,5], 2), ([1,2,3,4,5], 3), ([1,2,3,4,5], 1)]
outputs = [[2,1,4,3,5], [3,2,1,4,5], [1,2,3,4,5]]

results = []
for i in range(len(inputs)):
    input_list, k = inputs[i]
    head = createLinkedList(input_list)
    result_head = reverseKGroup(head, k)
    result = linkedListToValues(result_head)
    results.append(result == outputs[i])

print(results)","[True, True, True]",3,0
