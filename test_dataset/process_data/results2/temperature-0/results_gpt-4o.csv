ID,code,result,true_count,false_count
1,"def two_sum(nums, target):
    num_to_index = {}
    for i, num in enumerate(nums):
        complement = target - num
        if complement in num_to_index:
            return [num_to_index[complement], i]
        num_to_index[num] = i

# Example inputs and expected outputs
inputs = [
    ([2, 7, 11, 15], 9),
    ([3, 2, 4], 6),
    ([3, 3], 6)
]
expected_outputs = [
    [0, 1],
    [1, 2],
    [0, 1]
]

# Verify the solution
for i, (nums, target) in enumerate(inputs):
    result = two_sum(nums, target)
    print(result == expected_outputs[i])","True
True
True",3,0
2,"class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        dummy = ListNode()
        current = dummy
        carry = 0
        while l1 or l2 or carry:
            val1 = l1.val if l1 else 0
            val2 = l2.val if l2 else 0
            carry, out = divmod(val1 + val2 + carry, 10)
            current.next = ListNode(out)
            current = current.next
            if l1: l1 = l1.next
            if l2: l2 = l2.next
        return dummy.next

def list_to_linkedlist(lst):
    dummy = ListNode()
    current = dummy
    for number in lst:
        current.next = ListNode(number)
        current = current.next
    return dummy.next

def linkedlist_to_list(node):
    result = []
    while node:
        result.append(node.val)
        node = node.next
    return result

# Example 1
l1 = list_to_linkedlist([2, 4, 3])
l2 = list_to_linkedlist([5, 6, 4])
expected_output = [7, 0, 8]
solution = Solution()
output = linkedlist_to_list(solution.addTwoNumbers(l1, l2))
print(output == expected_output)

# Example 2
l1 = list_to_linkedlist([0])
l2 = list_to_linkedlist([0])
expected_output = [0]
output = linkedlist_to_list(solution.addTwoNumbers(l1, l2))
print(output == expected_output)

# Example 3
l1 = list_to_linkedlist([9, 9, 9, 9, 9, 9, 9])
l2 = list_to_linkedlist([9, 9, 9, 9])
expected_output = [8, 9, 9, 9, 0, 0, 0, 1]
output = linkedlist_to_list(solution.addTwoNumbers(l1, l2))
print(output == expected_output)","True
True
True",3,0
3,"def length_of_longest_substring(s: str) -> int:
    char_map = {}
    left = 0
    max_length = 0

    for right in range(len(s)):
        if s[right] in char_map:
            left = max(left, char_map[s[right]] + 1)
        char_map[s[right]] = right
        max_length = max(max_length, right - left + 1)

    return max_length

# Test cases
inputs = [""abcabcbb"", ""bbbbb"", ""pwwkew"", """"]
expected_outputs = [3, 1, 3, 0]

for i, input_str in enumerate(inputs):
    result = length_of_longest_substring(input_str)
    print(result == expected_outputs[i])","True
True
True
True",4,0
4,"def findMedianSortedArrays(nums1, nums2):
    merged = sorted(nums1 + nums2)
    n = len(merged)
    if n % 2 == 1:
        return float(merged[n // 2])
    else:
        return (merged[n // 2 - 1] + merged[n // 2]) / 2.0

# Example 1
nums1 = [1, 3]
nums2 = [2]
expected_output = 2.00000
print(findMedianSortedArrays(nums1, nums2) == expected_output)

# Example 2
nums1 = [1, 2]
nums2 = [3, 4]
expected_output = 2.50000
print(findMedianSortedArrays(nums1, nums2) == expected_output)

# Example 3
nums1 = [0, 0]
nums2 = [0, 0]
expected_output = 0.00000
print(findMedianSortedArrays(nums1, nums2) == expected_output)

# Example 4
nums1 = []
nums2 = [1]
expected_output = 1.00000
print(findMedianSortedArrays(nums1, nums2) == expected_output)

# Example 5
nums1 = [2]
nums2 = []
expected_output = 2.00000
print(findMedianSortedArrays(nums1, nums2) == expected_output)","True
True
True
True
True",5,0
5,"def longest_palindrome(s: str) -> str:
    n = len(s)
    if n == 0:
        return """"
    dp = [[False] * n for _ in range(n)]
    start, max_length = 0, 1
    for i in range(n):
        dp[i][i] = True
    for i in range(n-1):
        if s[i] == s[i+1]:
            dp[i][i+1] = True
            start = i
            max_length = 2
    for length in range(3, n+1):
        for i in range(n-length+1):
            j = i + length - 1
            if s[i] == s[j] and dp[i+1][j-1]:
                dp[i][j] = True
                start = i
                max_length = length
    return s[start:start+max_length]

# Test cases
inputs = [""babad"", ""cbbd"", ""a""]
outputs = [""bab"", ""bb"", ""a""]

for i, input_str in enumerate(inputs):
    result = longest_palindrome(input_str)
    print(result == outputs[i])","False
True
True",2,1
6,"def convert(s: str, numRows: int) -> str:
    if numRows == 1 or numRows >= len(s):
        return s

    rows = [''] * numRows
    current_row = 0
    going_down = False

    for char in s:
        rows[current_row] += char
        if current_row == 0 or current_row == numRows - 1:
            going_down = not going_down
        current_row += 1 if going_down else -1

    return ''.join(rows)

# Example inputs and expected outputs
inputs = [
    (""PAYPALISHIRING"", 3),
    (""PAYPALISHIRING"", 4),
    (""A"", 1)
]
expected_outputs = [
    ""PAHNAPLSIIGYIR"",
    ""PINALSIGYAHRPI"",
    ""A""
]

# Verify the solution
for i, (s, numRows) in enumerate(inputs):
    result = convert(s, numRows)
    print(result == expected_outputs[i])","True
True
True",3,0
7,"def reverse(x: int) -> int:
    INT_MIN, INT_MAX = -2**31, 2**31 - 1

    res = 0
    while x != 0:
        pop = x % 10 if x > 0 else x % -10
        x = x // 10 if x > 0 else (x - pop) // 10
        if res > INT_MAX // 10 or (res == INT_MAX // 10 and pop > 7):
            return 0
        if res < INT_MIN // 10 or (res == INT_MIN // 10 and pop < -8):
            return 0
        res = res * 10 + pop
    return res

# Test cases
inputs = [123, -123, 120]
expected_outputs = [321, -321, 21]

for i, input_val in enumerate(inputs):
    output = reverse(input_val)
    print(output == expected_outputs[i])","True
True
True",3,0
8,"def myAtoi(s: str) -> int:
    INT_MAX = 2**31 - 1
    INT_MIN = -2**31

    i = 0
    n = len(s)
    while i < n and s[i] == ' ':
        i += 1

    if i == n:
        return 0

    sign = 1
    if s[i] == '-' or s[i] == '+':
        sign = -1 if s[i] == '-' else 1
        i += 1

    num = 0
    while i < n and s[i].isdigit():
        num = num * 10 + int(s[i])
        i += 1

    num *= sign

    if num < INT_MIN:
        return INT_MIN
    if num > INT_MAX:
        return INT_MAX

    return num

# Test cases
inputs = [""42"", ""   -42"", ""4193 with words"", ""words and 987"", ""-91283472332""]
outputs = [42, -42, 4193, 0, -2147483648]

for i, input_str in enumerate(inputs):
    result = myAtoi(input_str)
    print(result == outputs[i])","True
True
True
True
True",5,0
9,"def is_palindrome(x: int) -> bool:
    if x < 0:
        return False
    original = x
    reversed_num = 0
    while x != 0:
        reversed_num = reversed_num * 10 + x % 10
        x //= 10
    return original == reversed_num

# Test cases
inputs = [121, -121, 10, -101]
expected_outputs = [True, False, False, False]

for i, input_val in enumerate(inputs):
    result = is_palindrome(input_val)
    print(result == expected_outputs[i])","True
True
True
True",4,0
10,"def isMatch(s, p):
    dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]
    dp[0][0] = True

    for j in range(1, len(p) + 1):
        if p[j - 1] == '*':
            dp[0][j] = dp[0][j - 2]

    for i in range(1, len(s) + 1):
        for j in range(1, len(p) + 1):
            if p[j - 1] == '.' or p[j - 1] == s[i - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            elif p[j - 1] == '*':
                dp[i][j] = dp[i][j - 2]
                if p[j - 2] == '.' or p[j - 2] == s[i - 1]:
                    dp[i][j] = dp[i][j] or dp[i - 1][j]

    return dp[-1][-1]

# Example inputs and expected outputs
inputs = [
    (""aa"", ""a""),
    (""aa"", ""a*""),
    (""ab"", "".*""),
]
expected_outputs = [
    False,
    True,
    True,
]

# Verify the solution
for i, (s, p) in enumerate(inputs):
    result = isMatch(s, p)
    print(result == expected_outputs[i])","True
True
True",3,0
11,"def max_area(height):
    left, right = 0, len(height) - 1
    max_area = 0
    while left < right:
        width = right - left
        max_area = max(max_area, min(height[left], height[right]) * width)
        if height[left] < height[right]:
            left += 1
        else:
            right -= 1
    return max_area

# Example inputs and expected outputs
inputs = [
    [1, 8, 6, 2, 5, 4, 8, 3, 7],
    [1, 1],
    [4, 3, 2, 1, 4],
    [1, 2, 1]
]
expected_outputs = [49, 1, 16, 2]

# Verify the solution
for i, input_data in enumerate(inputs):
    result = max_area(input_data)
    print(result == expected_outputs[i])","True
True
True
True",4,0
12,"def int_to_roman(num):
    val = [
        1000, 900, 500, 400,
        100, 90, 50, 40,
        10, 9, 5, 4,
        1
        ]
    syb = [
        ""M"", ""CM"", ""D"", ""CD"",
        ""C"", ""XC"", ""L"", ""XL"",
        ""X"", ""IX"", ""V"", ""IV"",
        ""I""
        ]
    roman_num = ''
    i = 0
    while  num > 0:
        for _ in range(num // val[i]):
            roman_num += syb[i]
            num -= val[i]
        i += 1
    return roman_num

# Test cases
inputs = [3, 4, 9]
expected_outputs = [""III"", ""IV"", ""IX""]

for i, input_val in enumerate(inputs):
    output = int_to_roman(input_val)
    print(output == expected_outputs[i])","True
True
True",3,0
13,"def romanToInt(s: str) -> int:
    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    total = 0
    prev_value = 0
    for char in reversed(s):
        value = roman[char]
        if value < prev_value:
            total -= value
        else:
            total += value
        prev_value = value
    return total

# Test cases
inputs = [""III"", ""IV"", ""IX""]
outputs = [3, 4, 9]

for i, input_str in enumerate(inputs):
    result = romanToInt(input_str)
    print(result == outputs[i])","True
True
True",3,0
14,"def reverseKGroup(head, k):
    def reverseLinkedList(head, k):
        new_head, ptr = None, head
        while k:
            next_node = ptr.next
            ptr.next = new_head
            new_head = ptr
            ptr = next_node
            k -= 1
        return new_head

    count = 0
    ptr = head
    while count < k and ptr:
        ptr = ptr.next
        count += 1

    if count == k:
        reversed_head = reverseLinkedList(head, k)
        head.next = reverseKGroup(ptr, k)
        return reversed_head
    return head

# Helper function to convert list to linked list
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

# Helper function to convert linked list to list
def linked_list_to_list(head):
    result = []
    while head:
        result.append(head.val)
        head = head.next
    return result

# Helper function to create linked list from list
def list_to_linked_list(lst):
    dummy = ListNode()
    current = dummy
    for value in lst:
        current.next = ListNode(value)
        current = current.next
    return dummy.next

# Test cases
input_1 = ([1, 2, 3, 4, 5], 2)
output_1 = [2, 1, 4, 3, 5]
input_2 = ([1, 2, 3, 4, 5], 3)
output_2 = [3, 2, 1, 4, 5]
input_3 = ([1, 2, 3, 4, 5], 1)
output_3 = [1, 2, 3, 4, 5]

# Convert inputs to linked lists
head_1 = list_to_linked_list(input_1[0])
head_2 = list_to_linked_list(input_2[0])
head_3 = list_to_linked_list(input_3[0])

# Apply function
result_1 = linked_list_to_list(reverseKGroup(head_1, input_1[1]))
result_2 = linked_list_to_list(reverseKGroup(head_2, input_2[1]))
result_3 = linked_list_to_list(reverseKGroup(head_3, input_3[1]))

# Verify results
print(result_1 == output_1)
print(result_2 == output_2)
print(result_3 == output_3)","Got invalid return object. Expected key `input_3` to be present, but got {'problem_solution': 'def longestCommonPrefix(strs):\n    if not strs:\n        return """"\n    prefix = strs[0]\n    for s in strs[1:]:\n        while s[:len(prefix)] != prefix and prefix:\n            prefix = prefix[:len(prefix)-1]\n    return prefix\n\n# Example inputs and expected outputs\ninputs = [\n    [""flower"",""flow"",""flight""],\n    [""dog"",""racecar"",""car""]\n]\nexpected_outputs = [\n    ""fl"",\n    """"\n]\n\n# Verify the solution\nfor i, input_data in enumerate(inputs):\n    result = longestCommonPrefix(input_data)\n    print(result == expected_outputs[i])', 'input_1': 'strs = [""flower"",""flow"",""flight""]', 'output_1': '""fl""', 'input_2': 'strs = [""dog"",""racecar"",""car""]', 'output_2': '""""'}",ERROR,ERROR
15,"def three_sum(nums):
    nums.sort()
    res = []
    for i in range(len(nums) - 2):
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        l, r = i + 1, len(nums) - 1
        while l < r:
            s = nums[i] + nums[l] + nums[r]
            if s < 0:
                l += 1
            elif s > 0:
                r -= 1
            else:
                res.append((nums[i], nums[l], nums[r]))
                while l < r and nums[l] == nums[l + 1]:
                    l += 1
                while l < r and nums[r] == nums[r - 1]:
                    r -= 1
                l += 1
                r -= 1
    return res

# Example inputs and expected outputs
input_1 = [-1, 0, 1, 2, -1, -4]
output_1 = [[-1, -1, 2], [-1, 0, 1]]
input_2 = []
output_2 = []
input_3 = [0]
output_3 = []

# Verify the solution
print(three_sum(input_1) == output_1)
print(three_sum(input_2) == output_2)
print(three_sum(input_3) == output_3)","False
True
True",2,1
16,"def threeSumClosest(nums, target):
    nums.sort()
    closest_sum = float('inf')
    for i in range(len(nums) - 2):
        left, right = i + 1, len(nums) - 1
        while left < right:
            current_sum = nums[i] + nums[left] + nums[right]
            if abs(current_sum - target) < abs(closest_sum - target):
                closest_sum = current_sum
            if current_sum < target:
                left += 1
            elif current_sum > target:
                right -= 1
            else:
                return current_sum
    return closest_sum

# Example 1
nums1 = [-1, 2, 1, -4]
target1 = 1
output1 = 2
print(threeSumClosest(nums1, target1) == output1)
",True,1,0
17,"def letter_combinations(digits):
    if not digits:
        return []
    phone = {
        '2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl',
        '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'
    }
    def backtrack(combination, next_digits):
        if len(next_digits) == 0:
            output.append(combination)
        else:
            for letter in phone[next_digits[0]]:
                backtrack(combination + letter, next_digits[1:])
    output = []
    backtrack('', digits)
    return output

# Example inputs and expected outputs
inputs = [""23"", """", ""2""]
expected_outputs = [
    [""ad"",""ae"",""af"",""bd"",""be"",""bf"",""cd"",""ce"",""cf""],
    [],
    [""a"",""b"",""c""]
]

# Verify the solution
for i, digits in enumerate(inputs):
    result = letter_combinations(digits)
    print(result == expected_outputs[i])","True
True
True",3,0
18,"def four_sum(nums, target):
    nums.sort()
    results = []
    length = len(nums)
    for i in range(length - 3):
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        for j in range(i + 1, length - 2):
            if j > i + 1 and nums[j] == nums[j - 1]:
                continue
            left, right = j + 1, length - 1
            while left < right:
                total = nums[i] + nums[j] + nums[left] + nums[right]
                if total == target:
                    results.append([nums[i], nums[j], nums[left], nums[right]])
                    while left < right and nums[left] == nums[left + 1]:
                        left += 1
                    while left < right and nums[right] == nums[right - 1]:
                        right -= 1
                    left += 1
                    right -= 1
                elif total < target:
                    left += 1
                else:
                    right -= 1
    return results

# Example inputs and expected outputs
inputs = [
    ([1, 0, -1, 0, -2, 2], 0),
    ([], 0)
]
expected_outputs = [
    [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]],
    []
]

# Verify the solution
for i, (nums, target) in enumerate(inputs):
    result = four_sum(nums, target)
    print(result == expected_outputs[i])","True
True",2,0
19,"class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:
        dummy = ListNode(0, head)
        first = dummy
        second = dummy
        for _ in range(n + 1):
            first = first.next
        while first is not None:
            first = first.next
            second = second.next
        second.next = second.next.next
        return dummy.next

# Helper function to convert list to linked list
def list_to_linkedlist(lst):
    dummy = ListNode(0)
    current = dummy
    for val in lst:
        current.next = ListNode(val)
        current = current.next
    return dummy.next

# Helper function to convert linked list to list
def linkedlist_to_list(node):
    result = []
    while node:
        result.append(node.val)
        node = node.next
    return result

# Test cases
inputs = [([1, 2, 3, 4, 5], 2), ([1], 1), ([1, 2], 1)]
outputs = [[1, 2, 3, 5], [], [1]]

solution = Solution()
for i, (lst, n) in enumerate(inputs):
    head = list_to_linkedlist(lst)
    result = solution.removeNthFromEnd(head, n)
    result_list = linkedlist_to_list(result)
    print(result_list == outputs[i])","True
True
True",3,0
20,"def isValid(s: str) -> bool:
    stack = []
    mapping = {')': '(', '}': '{', ']': '['}

    for char in s:
        if char in mapping:
            top_element = stack.pop() if stack else '#'
            if mapping[char] != top_element:
                return False
        else:
            stack.append(char)

    return not stack

# Test cases
inputs = [""()"", ""()[]{}"", ""(]"", ""([)]"", ""{[]}""]
outputs = [True, True, False, False, True]

for i, input_str in enumerate(inputs):
    result = isValid(input_str)
    print(result == outputs[i])","True
True
True
True
True",5,0
21,"def mergeTwoLists(l1, l2):
    dummy = ListNode(0)
    current = dummy
    while l1 and l2:
        if l1.val < l2.val:
            current.next = l1
            l1 = l1.next
        else:
            current.next = l2
            l2 = l2.next
        current = current.next
    current.next = l1 if l1 else l2
    return dummy.next

# Helper function to create linked list from list
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

# Helper function to convert list to linked list
def to_linked_list(lst):
    dummy = ListNode(0)
    current = dummy
    for val in lst:
        current.next = ListNode(val)
        current = current.next
    return dummy.next

# Helper function to convert linked list to list
def to_list(node):
    result = []
    while node:
        result.append(node.val)
        node = node.next
    return result

# Test cases
inputs = [([1,2,4], [1,3,4]), ([], []), ([], [0])]
expected_outputs = [[1,1,2,3,4,4], [], [0]]

for i, (l1, l2) in enumerate(inputs):
    l1 = to_linked_list(l1)
    l2 = to_linked_list(l2)
    merged_list = mergeTwoLists(l1, l2)
    output = to_list(merged_list)
    print(output == expected_outputs[i])","True
True
True",3,0
22,"def generateParenthesis(n):
    def backtrack(s='', left=0, right=0):
        if len(s) == 2 * n:
            result.append(s)
            return
        if left < n:
            backtrack(s+'(', left+1, right)
        if right < left:
            backtrack(s+')', left, right+1)

    result = []
    backtrack()
    return result

# Example inputs and expected outputs
inputs = [3, 1]
expected_outputs = [[""((()))"",""(()())"",""(())()"",""()(())"",""()()()""], [""()""]]

# Verify the solution
for i, n in enumerate(inputs):
    output = generateParenthesis(n)
    print(output == expected_outputs[i])","True
True",2,0
23,"import heapq

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

    def __lt__(self, other):
        return self.val < other.val

    def __repr__(self):
        return str(self.val)


def mergeKLists(lists):
    min_heap = []
    for l in lists:
        if l:
            heapq.heappush(min_heap, l)

    dummy = ListNode()
    current = dummy

    while min_heap:
        smallest_node = heapq.heappop(min_heap)
        current.next = smallest_node
        current = current.next
        if smallest_node.next:
            heapq.heappush(min_heap, smallest_node.next)

    return dummy.next


def list_to_nodes(lst):
    dummy = ListNode()
    current = dummy
    for val in lst:
        current.next = ListNode(val)
        current = current.next
    return dummy.next


def nodes_to_list(node):
    result = []
    while node:
        result.append(node.val)
        node = node.next
    return result


# Example 1
lists1 = [[1, 4, 5], [1, 3, 4], [2, 6]]
list_nodes1 = [list_to_nodes(l) for l in lists1]
output1 = nodes_to_list(mergeKLists(list_nodes1))
print(output1 == [1, 1, 2, 3, 4, 4, 5, 6])

# Example 2
lists2 = []
list_nodes2 = [list_to_nodes(l) for l in lists2]
output2 = nodes_to_list(mergeKLists(list_nodes2))
print(output2 == [])

# Example 3
lists3 = [[]]
list_nodes3 = [list_to_nodes(l) for l in lists3]
output3 = nodes_to_list(mergeKLists(list_nodes3))
print(output3 == [])","True
True
True",3,0
24,"class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def swapPairs(self, head: ListNode) -> ListNode:
        dummy = ListNode(0)
        dummy.next = head
        prev, curr = dummy, head
        while curr and curr.next:
            next_pair = curr.next.next
            second = curr.next
            second.next = curr
            curr.next = next_pair
            prev.next = second
            prev = curr
            curr = next_pair
        return dummy.next

def list_to_linkedlist(lst):
    dummy = ListNode(0)
    current = dummy
    for val in lst:
        current.next = ListNode(val)
        current = current.next
    return dummy.next

def linkedlist_to_list(node):
    result = []
    while node:
        result.append(node.val)
        node = node.next
    return result

# Example 1
input_1 = [1, 2, 3, 4]
expected_output_1 = [2, 1, 4, 3]
head_1 = list_to_linkedlist(input_1)
output_1 = linkedlist_to_list(Solution().swapPairs(head_1))
print(output_1 == expected_output_1)

# Example 2
input_2 = []
expected_output_2 = []
head_2 = list_to_linkedlist(input_2)
output_2 = linkedlist_to_list(Solution().swapPairs(head_2))
print(output_2 == expected_output_2)

# Example 3
input_3 = [1]
expected_output_3 = [1]
head_3 = list_to_linkedlist(input_3)
output_3 = linkedlist_to_list(Solution().swapPairs(head_3))
print(output_3 == expected_output_3)","True
True
True",3,0
25,"def reverseKGroup(head, k):
    def reverseLinkedList(head, k):
        new_head, ptr = None, head
        while k:
            next_node = ptr.next
            ptr.next = new_head
            new_head = ptr
            ptr = next_node
            k -= 1
        return new_head

    count = 0
    ptr = head
    while count < k and ptr:
        ptr = ptr.next
        count += 1

    if count == k:
        reversed_head = reverseLinkedList(head, k)
        head.next = reverseKGroup(ptr, k)
        return reversed_head
    return head

# Helper function to convert list to linked list
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

# Helper function to convert linked list to list
def linked_list_to_list(head):
    result = []
    while head:
        result.append(head.val)
        head = head.next
    return result

# Helper function to create linked list from list
def list_to_linked_list(lst):
    dummy = ListNode()
    current = dummy
    for value in lst:
        current.next = ListNode(value)
        current = current.next
    return dummy.next

# Test cases
input_1 = ([1, 2, 3, 4, 5], 2)
output_1 = [2, 1, 4, 3, 5]
input_2 = ([1, 2, 3, 4, 5], 3)
output_2 = [3, 2, 1, 4, 5]
input_3 = ([1, 2, 3, 4, 5], 1)
output_3 = [1, 2, 3, 4, 5]

# Convert inputs to linked lists
head_1 = list_to_linked_list(input_1[0])
head_2 = list_to_linked_list(input_2[0])
head_3 = list_to_linked_list(input_3[0])

# Apply function
result_1 = linked_list_to_list(reverseKGroup(head_1, input_1[1]))
result_2 = linked_list_to_list(reverseKGroup(head_2, input_2[1]))
result_3 = linked_list_to_list(reverseKGroup(head_3, input_3[1]))

# Verify results
print(result_1 == output_1)
print(result_2 == output_2)
print(result_3 == output_3)","True
True
True",3,0
,,,,
,,,,
