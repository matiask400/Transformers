ID,code,result,true_count,false_count
1,"def two_sum(nums, target):
    hashmap = {}
    for i in range(len(nums)):
        complement = target - nums[i]
        if complement in hashmap:
            return [i, hashmap[complement]]
        hashmap[nums[i]] = i


input_1 = [2,7,11,15]
target_1 = 9
output_1 = [0,1]
print(two_sum(input_1, target_1) == output_1)

input_2 = [3,2,4]
target_2 = 6
output_2 = [1,2]
print(two_sum(input_2, target_2) == output_2)

input_3 = [3,3]
target_3 = 6
output_3 = [0,1]
print(two_sum(input_3, target_3) == output_3)","False
False
False",0,3
2,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1, l2):
        dummy = ListNode(0)
        curr = dummy
        carry = 0

        while l1 or l2 or carry:
            val1 = l1.val if l1 else 0
            val2 = l2.val if l2 else 0

            total = val1 + val2 + carry
            carry = total // 10
            curr.next = ListNode(total % 10)

            curr = curr.next
            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None

        return dummy.next

def create_linked_list(nums):
    head = ListNode(nums[0])
    curr = head
    for i in range(1, len(nums)):
        curr.next = ListNode(nums[i])
        curr = curr.next
    return head

def compare_linked_lists(l1, l2):
    while l1 and l2:
        if l1.val != l2.val:
            return False
        l1 = l1.next
        l2 = l2.next
    return l1 is None and l2 is None

# Example test cases
input_1 = create_linked_list([2, 4, 3])
input_2 = create_linked_list([5, 6, 4])
expected_output_1 = create_linked_list([7, 0, 8])
print(compare_linked_lists(Solution().addTwoNumbers(input_1, input_2), expected_output_1))  # True

input_3 = create_linked_list([0])
input_4 = create_linked_list([0])
expected_output_2 = create_linked_list([0])
print(compare_linked_lists(Solution().addTwoNumbers(input_3, input_4), expected_output_2))  # True

input_5 = create_linked_list([9, 9, 9, 9, 9, 9, 9])
input_6 = create_linked_list([9, 9, 9, 9])
expected_output_3 = create_linked_list([8, 9, 9, 9, 0, 0, 0, 1])
print(compare_linked_lists(Solution().addTwoNumbers(input_5, input_6), expected_output_3))  # True",,0,0
3,"def length_of_longest_substring(s):
    char_set = set()
    max_length = 0
    left = 0
    
    for right in range(len(s)):
        while s[right] in char_set:
            char_set.remove(s[left])
            left += 1
        char_set.add(s[right])
        max_length = max(max_length, right - left + 1)
    return max_length


# Test cases
input_1 = ""abcabcbb""
output_1 = 3
input_2 = ""bbbbb""
output_2 = 1
input_3 = ""pwwkew""
output_3 = 3

print(length_of_longest_substring(input_1) == output_1)
print(length_of_longest_substring(input_2) == output_2)
print(length_of_longest_substring(input_3) == output_3)","True
True
True",3,0
4,"def find_median_sorted_arrays(nums1, nums2):
    m, n = len(nums1), len(nums2)
    if m > n:
        nums1, nums2, m, n = nums2, nums1, n, m
    imin, imax, half_len = 0, m, (m + n + 1) // 2
    while imin <= imax:
        i = (imin + imax) // 2
        j = half_len - i
        if i < m and nums2[j - 1] > nums1[i]:
            imin = i + 1
        elif i > 0 and nums1[i - 1] > nums2[j]:
            imax = i - 1
        else:
            if i == 0:
                max_left = nums2[j - 1]
            elif j == 0:
                max_left = nums1[i - 1]
            else:
                max_left = max(nums1[i - 1], nums2[j - 1])
            if (m + n) % 2 == 1:
                return max_left
            if i == m:
                min_right = nums2[j]
            elif j == n:
                min_right = nums1[i]
            else:
                min_right = min(nums1[i], nums2[j])
            return (max_left + min_right) / 2.0


# Test cases
inputs = [
    ([1, 3], [2]),
    ([1, 2], [3, 4]),
    ([0, 0], [0, 0]),
    ([], [1]),
    ([2], []),
]
outputs = [
    2.00000,
    2.50000,
    0.00000,
    1.00000,
    2.00000,
]

for i in range(len(inputs)):
    output = find_median_sorted_arrays(inputs[i][0], inputs[i][1])
    print(output == outputs[i])","True
True
True
True
True",5,0
5,"def longestPalindrome(s):
    n = len(s)
    if n < 2:
        return s

    dp = [[False] * n for _ in range(n)]
    for i in range(n):
        dp[i][i] = True

    max_len = 1
    start = 0
    for l in range(2, n + 1):
        for i in range(n - l + 1):
            j = i + l - 1
            if l == 2 and s[i] == s[j]:
                dp[i][j] = True
                start = i
                max_len = l
            elif s[i] == s[j] and dp[i + 1][j - 1]:
                dp[i][j] = True
                start = i
                max_len = l
    return s[start : start + max_len]


s1 = ""babad""
e1 = ""bab""
s2 = ""cbbd""
e2 = ""bb""
s3 = ""a""
e3 = ""a""

print(f'Input: {s1}, Output: {longestPalindrome(s1)}, Expected: {e1}, Result: {longestPalindrome(s1) == e1}')
print(f'Input: {s2}, Output: {longestPalindrome(s2)}, Expected: {e2}, Result: {longestPalindrome(s2) == e2}')
print(f'Input: {s3}, Output: {longestPalindrome(s3)}, Expected: {e3}, Result: {longestPalindrome(s3) == e3}')","Input: babad, Output: aba, Expected: bab, Result: False
Input: cbbd, Output: bb, Expected: bb, Result: True
Input: a, Output: a, Expected: a, Result: True",2,1
6,"def convert(s, numRows):
    if numRows == 1 or numRows >= len(s):
        return s
    rows = [''] * numRows
    row_index = 0
    direction = 1
    for char in s:
        rows[row_index] += char
        row_index += direction
        if row_index == numRows - 1 or row_index == 0:
            direction *= -1
    return ''.join(rows)


input_1 = ""PAYPALISHIRING""
output_1 = ""PAHNAPLSIIGYIR""
input_2 = ""PAYPALISHIRING""
output_2 = ""PINALSIGYAHRPI""
input_3 = ""A""
output_3 = ""A""

print(convert(input_1, 3) == output_1)
print(convert(input_2, 4) == output_2)
print(convert(input_3, 1) == output_3)","True
True
True",3,0
7,"def reverse_integer(x):
    sign = 1 if x >= 0 else -1
    x = abs(x)
    reversed_x = 0
    while x > 0:
        digit = x % 10
        reversed_x = reversed_x * 10 + digit
        x //= 10
    reversed_x *= sign
    if reversed_x < -2**31 or reversed_x > 2**31 - 1:
        return 0
    return reversed_x

# Test cases
input_1 = 123
output_1 = 321
input_2 = -123
output_2 = -321
input_3 = 120
output_3 = 21

print(reverse_integer(input_1) == output_1)
print(reverse_integer(input_2) == output_2)
print(reverse_integer(input_3) == output_3)","True
True
True",3,0
8,"def myAtoi(s: str) -> int:
    s = s.strip()
    if len(s) == 0:
        return 0
    sign = 1
    if s[0] == '-':
        sign = -1
        s = s[1:]
    elif s[0] == '+':
        s = s[1:]
    result = 0
    for c in s:
        if not c.isdigit():
            break
        result = result * 10 + int(c)
    result = sign * result
    if result > 2**31 - 1:
        return 2**31 - 1
    elif result < -2**31:
        return -2**31
    else:
        return result


input_1 = ""42""
output_1 = 42
input_2 = ""   -42""
output_2 = -42
input_3 = ""4193 with words""
output_3 = 4193

print(myAtoi(input_1) == output_1)
print(myAtoi(input_2) == output_2)
print(myAtoi(input_3) == output_3)","True
True
True",3,0
9,"def isPalindrome(x):
    if x < 0:
        return False
    if x < 10:
        return True
    copy = x
    reverse = 0
    while copy > 0:
        digit = copy % 10
        reverse = reverse * 10 + digit
        copy //= 10
    return x == reverse

print(f""Input: 121, Output: {isPalindrome(121) == True}"")
print(f""Input: -121, Output: {isPalindrome(-121) == False}"")
print(f""Input: 10, Output: {isPalindrome(10) == False}"")","Input: 121, Output: True
Input: -121, Output: True
Input: 10, Output: True",3,0
10,"def isPalindrome(x):
    if x < 0:
        return False
    if x < 10:
        return True
    copy = x
    reverse = 0
    while copy > 0:
        digit = copy % 10
        reverse = reverse * 10 + digit
        copy //= 10
    return x == reverse

print(f""Input: 121, Output: {isPalindrome(121) == True}"")
print(f""Input: -121, Output: {isPalindrome(-121) == False}"")
print(f""Input: 10, Output: {isPalindrome(10) == False}"")",429 Resource has been exhausted (e.g. check quota).,ERROR,ERROR
11,"def maxArea(height):
    max_area = 0
    left = 0
    right = len(height) - 1
    while left < right:
        max_area = max(max_area, min(height[left], height[right]) * (right - left))
        if height[left] < height[right]:
            left += 1
        else:
            right -= 1
    return max_area


input_1 = [1, 8, 6, 2, 5, 4, 8, 3, 7]
output_1 = 49
input_2 = [1, 1]
output_2 = 1
input_3 = [4, 3, 2, 1, 4]
output_3 = 16

print(maxArea(input_1) == output_1)
print(maxArea(input_2) == output_2)
print(maxArea(input_3) == output_3)","True
True
True",3,0
12,"def intToRoman(num: int) -> str:
    symbol_map = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'XD', 500: 'D', 900: 'CM', 1000: 'M'}
    integers = list(symbol_map.keys())
    symbols = list(symbol_map.values())

    i = 12
    result = ''

    while num != 0:
        if integers[i] <= num:
            result += symbols[i]
            num -= integers[i]
        else:
            i -= 1

    return result


input_1 = 3
output_1 = ""III""
print(f""Input 1: {intToRoman(input_1) == output_1}"")

input_2 = 4
output_2 = ""IV""
print(f""Input 2: {intToRoman(input_2) == output_2}"")

input_3 = 9
output_3 = ""IX""
print(f""Input 3: {intToRoman(input_3) == output_3}"")","Input 1: True
Input 2: True
Input 3: True",3,0
13,"def roman_to_integer(s):
    roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    n = len(s)
    num = 0
    i = 0
    while i < n:
        if i + 1 < n and roman_map[s[i]] < roman_map[s[i + 1]]:
            num += roman_map[s[i + 1]] - roman_map[s[i]]
            i += 2
        else:
            num += roman_map[s[i]]
            i += 1
    return num


input_1 = ""III""
output_1 = 3
print(f""Input 1: {roman_to_integer(input_1) == output_1}"")

input_2 = ""IV""
output_2 = 4
print(f""Input 2: {roman_to_integer(input_2) == output_2}"")

input_3 = ""IX""
output_3 = 9
print(f""Input 3: {roman_to_integer(input_3) == output_3}"")

input_4 = ""LVIII""
output_4 = 58
print(f""Input 4: {roman_to_integer(input_4) == output_4}"")

input_5 = ""MCMXCIV""
output_5 = 1994
print(f""Input 5: {roman_to_integer(input_5) == output_5}"")","Input 1: True
Input 2: True
Input 3: True
Input 4: True
Input 5: True",5,0
14,"def longestCommonPrefix(strs):
    if not strs:
        return """"

    prefix = strs[0]
    for i in range(1, len(strs)):
        j = 0
        while j < len(prefix) and j < len(strs[i]) and prefix[j] == strs[i][j]:
            j += 1
        prefix = prefix[:j]
        if not prefix:
            return """"
    return prefix


input1 = [""flower"", ""flow"", ""flight""]
output1 = ""fl""
print(f""Input 1: {input1}, Output: {output1 == longestCommonPrefix(input1)}"")

input2 = [""dog"", ""racecar"", ""car""]
output2 = """"
print(f""Input 2: {input2}, Output: {output2 == longestCommonPrefix(input2)}"")","Input 1: ['flower', 'flow', 'flight'], Output: True
Input 2: ['dog', 'racecar', 'car'], Output: True",2,0
15,"def longestCommonPrefix(strs):
    if not strs:
        return """"

    prefix = strs[0]
    for i in range(1, len(strs)):
        j = 0
        while j < len(prefix) and j < len(strs[i]) and prefix[j] == strs[i][j]:
            j += 1
        prefix = prefix[:j]
        if not prefix:
            return """"
    return prefix


input1 = [""flower"", ""flow"", ""flight""]
output1 = ""fl""
print(f""Input 1: {input1}, Output: {output1 == longestCommonPrefix(input1)}"")

input2 = [""dog"", ""racecar"", ""car""]
output2 = """"
print(f""Input 2: {input2}, Output: {output2 == longestCommonPrefix(input2)}"")",429 Resource has been exhausted (e.g. check quota).,ERROR,ERROR
16,"def longestCommonPrefix(strs):
    if not strs:
        return """"

    prefix = strs[0]
    for i in range(1, len(strs)):
        j = 0
        while j < len(prefix) and j < len(strs[i]) and prefix[j] == strs[i][j]:
            j += 1
        prefix = prefix[:j]
        if not prefix:
            return """"
    return prefix


input1 = [""flower"", ""flow"", ""flight""]
output1 = ""fl""
print(f""Input 1: {input1}, Output: {output1 == longestCommonPrefix(input1)}"")

input2 = [""dog"", ""racecar"", ""car""]
output2 = """"
print(f""Input 2: {input2}, Output: {output2 == longestCommonPrefix(input2)}"")",429 Resource has been exhausted (e.g. check quota).,ERROR,ERROR
17,"def letterCombinations(digits):
    if not digits:
        return []

    mapping = {
        '2': 'abc',
        '3': 'def',
        '4': 'ghi',
        '5': 'jkl',
        '6': 'mno',
        '7': 'pqrs',
        '8': 'tuv',
        '9': 'wxyz'
    }

    result = ['']
    for digit in digits:
        temp = []
        for letter in mapping[digit]:
            for combination in result:
                temp.append(combination + letter)
        result = temp
    return result

digits1 = ""23""
output1 = [""ad"",""ae"",""af"",""bd"",""be"",""bf"",""cd"",""ce"",""cf""]
digits2 = """"
output2 = []
digits3 = ""2""
output3 = [""a"",""b"",""c""]
print(letterCombinations(digits1) == output1)
print(letterCombinations(digits2) == output2)
print(letterCombinations(digits3) == output3)","False
True
True",2,1
18,"def four_sum(nums, target):
    nums.sort()
    result = []
    n = len(nums)
    for i in range(n - 3):
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        for j in range(i + 1, n - 2):
            if j > i + 1 and nums[j] == nums[j - 1]:
                continue
            left = j + 1
            right = n - 1
            while left < right:
                total = nums[i] + nums[j] + nums[left] + nums[right]
                if total == target:
                    result.append([nums[i], nums[j], nums[left], nums[right]])
                    left += 1
                    right -= 1
                    while left < right and nums[left] == nums[left - 1]:
                        left += 1
                    while left < right and nums[right] == nums[right + 1]:
                        right -= 1
                elif total < target:
                    left += 1
                else:
                    right -= 1
    return result


input_1 = [1, 0, -1, 0, -2, 2]
target_1 = 0
output_1 = [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]

input_2 = []
target_2 = 0
output_2 = []

print(f""Input 1: {four_sum(input_1, target_1) == output_1}"")
print(f""Input 2: {four_sum(input_2, target_2) == output_2}"")","Input 1: True
Input 2: True",2,0
19,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head, n):
        dummy = ListNode(0, head)
        left = dummy
        right = head

        while n > 0 and right:
            right = right.next
            n -= 1

        while right:
            left = left.next
            right = right.next

        # Delete the node
        left.next = left.next.next

        return dummy.next

def print_linked_list(head):
    current = head
    values = []
    while current:
        values.append(current.val)
        current = current.next
    return values

# Test cases
test_cases = [
    ([1, 2, 3, 4, 5], 2, [1, 2, 3, 5]),
    ([1], 1, []),
    ([1, 2], 1, [1]),
]

solution = Solution()

for i, (head_values, n, expected_output) in enumerate(test_cases):
    # Create the linked list from the input values
    head = ListNode(head_values[0])
    current = head
    for val in head_values[1:]:
        current.next = ListNode(val)
        current = current.next

    result_head = solution.removeNthFromEnd(head, n)
    result = print_linked_list(result_head)
    print(f""Test case {i+1}: {result == expected_output}"")",,0,0
20,"def is_valid(s):
    stack = []
    mapping = {')': '(', '}': '{', ']': '['}
    for char in s:
        if char in mapping:
            top_element = stack.pop() if stack else '#'
            if mapping[char] != top_element:
                return False
        else:
            stack.append(char)
    return not stack


s1 = ""()""
output1 = is_valid(s1)
expected_output1 = True
print(f""Input: {s1}, Output: {output1}, Expected: {expected_output1}, Result: {output1 == expected_output1}"")

s2 = ""()[]{}""
output2 = is_valid(s2)
expected_output2 = True
print(f""Input: {s2}, Output: {output2}, Expected: {expected_output2}, Result: {output2 == expected_output2}"")

s3 = ""(]""
output3 = is_valid(s3)
expected_output3 = False
print(f""Input: {s3}, Output: {output3}, Expected: {expected_output3}, Result: {output3 == expected_output3}"")

s4 = ""([)]""
output4 = is_valid(s4)
expected_output4 = False
print(f""Input: {s4}, Output: {output4}, Expected: {expected_output4}, Result: {output4 == expected_output4}"")

s5 = ""{[]}""
output5 = is_valid(s5)
expected_output5 = True
print(f""Input: {s5}, Output: {output5}, Expected: {expected_output5}, Result: {output5 == expected_output5}"")","Input: (), Output: True, Expected: True, Result: True
Input: ()[]{}, Output: True, Expected: True, Result: True
Input: (], Output: False, Expected: False, Result: True
Input: ([)], Output: False, Expected: False, Result: True
Input: {[]}, Output: True, Expected: True, Result: True",11,4
21,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        dummy = ListNode(0)
        tail = dummy

        while l1 and l2:
            if l1.val <= l2.val:
                tail.next = l1
                l1 = l1.next
            else:
                tail.next = l2
                l2 = l2.next
            tail = tail.next

        if l1:
            tail.next = l1
        else:
            tail.next = l2

        return dummy.next

def print_linked_list(head):
    result = []
    current = head
    while current:
        result.append(current.val)
        current = current.next
    return result

def test_solution():
    solution = Solution()

    # Test case 1
    l1 = ListNode(1, ListNode(2, ListNode(4)))
    l2 = ListNode(1, ListNode(3, ListNode(4)))
    merged_list = solution.mergeTwoLists(l1, l2)
    print(print_linked_list(merged_list) == [1, 1, 2, 3, 4, 4])  # Expected output: True

    # Test case 2
    l1 = None
    l2 = None
    merged_list = solution.mergeTwoLists(l1, l2)
    print(print_linked_list(merged_list) == [])  # Expected output: True

    # Test case 3
    l1 = None
    l2 = ListNode(0)
    merged_list = solution.mergeTwoLists(l1, l2)
    print(print_linked_list(merged_list) == [0])  # Expected output: True

test_solution()",,0,0
22,"def generateParenthesis(n):
    result = []
    def backtrack(s, left, right):
        if len(s) == 2 * n:
            result.append(s)
            return
        if left < n:
            backtrack(s + '(', left + 1, right)
        if right < left:
            backtrack(s + ')', left, right + 1)
    backtrack('', 0, 0)
    return result

# Test cases
print(generateParenthesis(3) == [""((()))"",""(()())"",""(())()"",""()(())"",""()()()""])
print(generateParenthesis(1) == [""()""])","True
True",2,0
23,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists):
        if not lists or len(lists) == 0:
            return None

        if len(lists) == 1:
            return lists[0]

        mid = len(lists) // 2
        left = self.mergeKLists(lists[:mid])
        right = self.mergeKLists(lists[mid:])
        return self.mergeTwoLists(left, right)

    def mergeTwoLists(self, l1, l2):
        dummy = ListNode(0)
        tail = dummy

        while l1 and l2:
            if l1.val < l2.val:
                tail.next = l1
                l1 = l1.next
            else:
                tail.next = l2
                l2 = l2.next
            tail = tail.next

        if l1:
            tail.next = l1
        if l2:
            tail.next = l2

        return dummy.next

def arrayToLinkedList(arr):
    if not arr:
        return None
    head = ListNode(arr[0])
    curr = head
    for i in range(1, len(arr)):
        curr.next = ListNode(arr[i])
        curr = curr.next
    return head

def linkedListToArray(head):
    arr = []
    while head:
        arr.append(head.val)
        head = head.next
    return arr


inputs = [ [[1,4,5],[1,3,4],[2,6]], [], [[]] ]
outputs = [ [1,1,2,3,4,4,5,6], [], [] ]

# Test the function
for i in range(len(inputs)):
    linked_lists = [arrayToLinkedList(arr) for arr in inputs[i]]
    merged_list = Solution().mergeKLists(linked_lists)
    output = linkedListToArray(merged_list)
    print(output == outputs[i])
",,0,0
24,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def swapPairs(self, head):
        dummy = ListNode(0, head)
        prev, curr = dummy, head

        while curr and curr.next:
            # Save pointers
            nextPair = curr.next.next
            second = curr.next

            # Reverse this pair
            second.next = curr
            curr.next = nextPair
            prev.next = second

            # Update pointers
            prev = curr
            curr = nextPair

        return dummy.next


def printLinkedList(head):
    result = []
    current = head
    while current:
        result.append(current.val)
        current = current.next
    return result

# Test cases
testCases = [
    ([1, 2, 3, 4], [2, 1, 4, 3]),
    ([], []),
    ([1], [1])
]

for i, (input, expectedOutput) in enumerate(testCases):
    head = ListNode(0)
    current = head
    for val in input:
        current.next = ListNode(val)
        current = current.next
    head = head.next

    solution = Solution()
    result = solution.swapPairs(head)
    output = printLinkedList(result)

    print(f""Test case {i+1}: {output == expectedOutput}"")",,0,0
25,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        dummy = ListNode(0, head)
        groupPrev = dummy

        while True:
            kth = self.getKth(groupPrev, k)
            if not kth:
                break
            groupNext = kth.next

            # reverse group
            prev, curr = kth.next, groupPrev.next
            while curr != groupNext:
                tmp = curr.next
                curr.next = prev
                prev = curr
                curr = tmp

            # connect with previous and next groups
            tmp = groupPrev.next
            groupPrev.next = kth
            groupPrev = tmp

        return dummy.next

    def getKth(self, curr, k):
        while curr and k > 0:
            curr = curr.next
            k -= 1
        return curr

# Test cases
head1 = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5)))))
head2 = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5)))))
head3 = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5)))))
head4 = ListNode(1)
sol = Solution()

print(sol.reverseKGroup(head1, 2) == ListNode(2, ListNode(1, ListNode(4, ListNode(3, ListNode(5))))))  # True
print(sol.reverseKGroup(head2, 3) == ListNode(3, ListNode(2, ListNode(1, ListNode(4, ListNode(5))))))  # True
print(sol.reverseKGroup(head3, 1) == ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5))))))  # True
print(sol.reverseKGroup(head4, 1) == ListNode(1))  # True",,0,0
