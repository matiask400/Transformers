ID,code,result,true_count,false_count
1,"def two_sum(nums, target):
    num_dict = {}
    for i, num in enumerate(nums):
        complement = target - num
        if complement in num_dict:
            return [num_dict[complement], i]
        num_dict[num] = i

# Test the solution with example inputs
print(two_sum([2,7,11,15], 9) == [0, 1])
print(two_sum([3,2,4], 6) == [1, 2])
print(two_sum([3,3], 6) == [0, 1])","True
True
True",3,0
2,"def addTwoNumbers(l1, l2):
    dummy = ListNode()
    current = dummy
    carry = 0
    while l1 or l2 or carry:
        sum_val = carry
        if l1:
            sum_val += l1.val
            l1 = l1.next
        if l2:
            sum_val += l2.val
            l2 = l2.next
        carry, val = divmod(sum_val, 10)
        current.next = ListNode(val)
        current = current.next
    return dummy.next

# Test the solution with example inputs
l1 = ListNode(2)
l1.next = ListNode(4)
l1.next.next = ListNode(3)
l2 = ListNode(5)
l2.next = ListNode(6)
l2.next.next = ListNode(4)
result = addTwoNumbers(l1, l2)
print(result.val == 7 and result.next.val == 0 and result.next.next.val == 8)

l1 = ListNode(0)
l2 = ListNode(0)
result = addTwoNumbers(l1, l2)
print(result.val == 0)

l1 = ListNode(9)
l1.next = ListNode(9)
l1.next.next = ListNode(9)
l1.next.next.next = ListNode(9)
l1.next.next.next.next = ListNode(9)
l1.next.next.next.next.next = ListNode(9)
l1.next.next.next.next.next.next = ListNode(9)
l2 = ListNode(9)
l2.next = ListNode(9)
l2.next.next = ListNode(9)
l2.next.next.next = ListNode(9)
result = addTwoNumbers(l1, l2)
print(result.val == 8 and result.next.val == 9 and result.next.next.val == 9 and result.next.next.next.val == 9 and result.next.next.next.next.val == 0 and result.next.next.next.next.next.val == 0 and result.next.next.next.next.next.next.val == 0 and result.next.next.next.next.next.next.next.val == 1)",,0,0
3,"def lengthOfLongestSubstring(s):
    start = 0
    max_length = 0
    char_index = {}

    for i in range(len(s)):
        if s[i] in char_index and char_index[s[i]] >= start:
            start = char_index[s[i]] + 1
        char_index[s[i]] = i
        max_length = max(max_length, i - start + 1)

    return max_length

# Test the solution with example inputs
print(lengthOfLongestSubstring('abcabcbb') == 3)
print(lengthOfLongestSubstring('bbbbb') == 1)
print(lengthOfLongestSubstring('pwwkew') == 3)","True
True
True",3,0
4,"def findMedianSortedArrays(nums1, nums2):
    merged = sorted(nums1 + nums2)
    n = len(merged)
    if n % 2 == 0:
        return (merged[n // 2 - 1] + merged[n // 2]) / 2
    else:
        return merged[n // 2]

# Test cases
print(findMedianSortedArrays([1,3], [2]) == 2.0)
print(findMedianSortedArrays([1,2], [3,4]) == 2.5)
print(findMedianSortedArrays([0,0], [0,0]) == 0.0)","True
True
True",3,0
5,"def longest_palindromic_substring(s):
    def expand_around_center(left, right):
        while left >= 0 and right < len(s) and s[left] == s[right]:
            left -= 1
            right += 1
        return s[left + 1:right]

    if len(s) < 1:
        return """"
    longest = """"
    for i in range(len(s)):
        palindrome1 = expand_around_center(i, i)
        palindrome2 = expand_around_center(i, i + 1)
        if len(palindrome1) > len(longest):
            longest = palindrome1
        if len(palindrome2) > len(longest):
            longest = palindrome2
    return longest

# Test Cases
print(longest_palindromic_substring(""babad"") == ""bab"")
print(longest_palindromic_substring(""cbbd"") == ""bb"")
print(longest_palindromic_substring(""a"") == ""a"")","True
True
True",3,0
6,"def convert(s, numRows):
    if numRows == 1 or numRows >= len(s):
        return s
    rows = [''] * numRows
    index, step = 0, 1
    for char in s:
        rows[index] += char
        if index == 0:
            step = 1
        elif index == numRows - 1:
            step = -1
        index += step
    return ''.join(rows)

# Test Cases
print(convert('PAYPALISHIRING', 3) == 'PAHNAPLSIIGYIR')
print(convert('PAYPALISHIRING', 4) == 'PINALSIGYAHRPI')
print(convert('A', 1) == 'A')","True
True
True",3,0
7,"def reverse_integer(x):
    if x < 0:
        sign = -1
        x = -x
    else:
        sign = 1
    reversed_x = 0
    while x != 0:
        digit = x % 10
        x = x // 10
        reversed_x = reversed_x * 10 + digit
    reversed_x *= sign
    if reversed_x < -2**31 or reversed_x > 2**31 - 1:
        return 0
    return reversed_x

# Test the function with example inputs
print(reverse_integer(123) == 321)
print(reverse_integer(-123) == -321)
print(reverse_integer(120) == 21)
print(reverse_integer(0) == 0)","True
True
True
True",4,0
8,"def myAtoi(s: str) -> int:
    s = s.strip()
    if not s:
        return 0
    sign = 1
    if s[0] == '-':
        sign = -1
        s = s[1:]
    elif s[0] == '+':
        s = s[1:]
    result = 0
    for char in s:
        if not char.isdigit():
            break
        result = result * 10 + int(char)
    result = max(-2**31, min(sign * result, 2**31 - 1))
    return result

# Test cases
print(myAtoi(""42"") == 42)
print(myAtoi(""   -42"") == -42)
print(myAtoi(""4193 with words"") == 4193)","True
True
True",3,0
9,"def isPalindrome(x):
    if x < 0:
        return False
    reversed_num = 0
    original_num = x
    while x > 0:
        digit = x % 10
        reversed_num = reversed_num * 10 + digit
        x = x // 10
    return original_num == reversed_num

# Test cases
print(isPalindrome(121) == True)
print(isPalindrome(-121) == False)
print(isPalindrome(10) == False)","True
True
True",3,0
10,"def isMatch(s: str, p: str) -> bool:
    dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]
    dp[0][0] = True
    for i in range(2, len(p) + 1):
        if p[i - 1] == '*':
            dp[0][i] = dp[0][i - 2]
    for i in range(1, len(s) + 1):
        for j in range(1, len(p) + 1):
            if s[i - 1] == p[j - 1] or p[j - 1] == '.':
                dp[i][j] = dp[i - 1][j - 1]
            elif p[j - 1] == '*':
                dp[i][j] = dp[i][j - 2] or (dp[i - 1][j] and (s[i - 1] == p[j - 2] or p[j - 2] == '.'))
    return dp[len(s)][len(p)]

# Test cases
print(isMatch('aa', 'a'))  # False
print(isMatch('aa', 'a*'))  # True
print(isMatch('ab', '.*'))  # True","False
True
True",2,1
11,"def maxArea(height):
    max_area = 0
    left = 0
    right = len(height) - 1
    while left < right:
        width = right - left
        h = min(height[left], height[right])
        max_area = max(max_area, width * h)
        if height[left] < height[right]:
            left += 1
        else:
            right -= 1
    return max_area

# Test the solution with example inputs
print(maxArea([1,8,6,2,5,4,8,3,7]) == 49)
print(maxArea([1,1]) == 1)
print(maxArea([4,3,2,1,4]) == 16)
print(maxArea([1,2,1]) == 2)","True
True
True
True",4,0
12,"def intToRoman(num: int) -> str:
    roman_numerals = [(1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')]
    roman_numeral = ''
    for value, numeral in roman_numerals:
        count = num // value
        roman_numeral += numeral * count
        num -= value * count
    return roman_numeral

# Test cases
print(intToRoman(3) == 'III')
print(intToRoman(4) == 'IV')
print(intToRoman(9) == 'IX')","True
True
True",3,0
13,"def romanToInt(s):
    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    result = 0
    prev_value = 0
    for char in s:
        value = roman_dict[char]
        if value > prev_value:
            result += value - 2 * prev_value
        else:
            result += value
        prev_value = value
    return result

# Test cases
print(romanToInt('III') == 3)
print(romanToInt('IV') == 4)
print(romanToInt('IX') == 9)
print(romanToInt('LVIII') == 58)
print(romanToInt('MCMXCIV') == 1994)","True
True
True
True
True",5,0
14,"def longestCommonPrefix(strs):
    if not strs:
        return """"
    prefix = strs[0]
    for string in strs[1:]:
        while string.find(prefix) != 0:
            prefix = prefix[:-1]
            if not prefix:
                return """"
    return prefix

# Test the solution with example inputs
print(longestCommonPrefix([""flower"",""flow"",""flight""]) == ""fl"")
print(longestCommonPrefix([""dog"",""racecar"",""car""]) == """"",,0,0
15,"def threeSum(nums):
    res = []
    nums.sort()
    n = len(nums)
    for i in range(n-2):
        if i > 0 and nums[i] == nums[i-1]:
            continue
        l, r = i+1, n-1
        while l < r:
            total = nums[i] + nums[l] + nums[r]
            if total < 0:
                l += 1
            elif total > 0:
                r -= 1
            else:
                res.append([nums[i], nums[l], nums[r]])
                while l < r and nums[l] == nums[l+1]:
                    l += 1
                while l < r and nums[r] == nums[r-1]:
                    r -= 1
                l += 1
                r -= 1
    return res

# Test cases
print(threeSum([-1,0,1,2,-1,-4]) == [[-1,-1,2],[-1,0,1]])
print(threeSum([]) == [])
print(threeSum([0]) == [])","True
True
True",3,0
16,"def threeSumClosest(nums, target):
    nums.sort()
    closest_sum = float('inf')
    for i in range(len(nums)):
        left = i + 1
        right = len(nums) - 1
        while left < right:
            current_sum = nums[i] + nums[left] + nums[right]
            if abs(target - current_sum) < abs(target - closest_sum):
                closest_sum = current_sum
            if current_sum < target:
                left += 1
            else:
                right -= 1
    return closest_sum

# Test the solution with example inputs
print(threeSumClosest([-1, 2, 1, -4], 1) == 2)
print(threeSumClosest([1, 1, 1, 0], -100) == 2)
print(threeSumClosest([0, 0, 0], 1) == 0)","True
True
True",3,0
17,"def letterCombinations(digits):
    if not digits:
        return []
    mapping = {
        '2': 'abc',
        '3': 'def',
        '4': 'ghi',
        '5': 'jkl',
        '6': 'mno',
        '7': 'pqrs',
        '8': 'tuv',
        '9': 'wxyz'
    }
    def backtrack(combination, next_digits):
        if len(next_digits) == 0:
            output.append(combination)
        else:
            for letter in mapping[next_digits[0]]:
                backtrack(combination + letter, next_digits[1:])
    output = []
    backtrack('', digits)
    return output

# Test Cases
print(letterCombinations('23') == ['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf'])
print(letterCombinations('') == [])
print(letterCombinations('2') == ['a', 'b', 'c'])","True
True
True",3,0
18,"def fourSum(nums, target):
    nums.sort()
    n = len(nums)
    res = []
    for i in range(n-3):
        if i > 0 and nums[i] == nums[i-1]:
            continue
        for j in range(i+1, n-2):
            if j > i+1 and nums[j] == nums[j-1]:
                continue
            left = j + 1
            right = n - 1
            while left < right:
                total = nums[i] + nums[j] + nums[left] + nums[right]
                if total == target:
                    res.append([nums[i], nums[j], nums[left], nums[right]])
                    while left < right and nums[left] == nums[left+1]:
                        left += 1
                    while left < right and nums[right] == nums[right-1]:
                        right -= 1
                    left += 1
                    right -= 1
                elif total < target:
                    left += 1
                else:
                    right -= 1
    return res

# Test Cases
print(fourSum([1,0,-1,0,-2,2], 0) == [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]])
print(fourSum([], 0) == [])","True
True",2,0
19,"def removeNthFromEnd(head, n):
    dummy = ListNode(0)
    dummy.next = head
    first = dummy
    second = dummy
    for i in range(n + 1):
        first = first.next
    while first is not None:
        first = first.next
        second = second.next
    second.next = second.next.next
    return dummy.next

# Test the solution with example inputs
head1 = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5)))))
output1 = ListNode(1, ListNode(2, ListNode(3, ListNode(5)))
print(removeNthFromEnd(head1, 2) == output1)

head2 = ListNode(1)
output2 = None
print(removeNthFromEnd(head2, 1) == output2)

head3 = ListNode(1, ListNode(2))
output3 = ListNode(1)
print(removeNthFromEnd(head3, 1) == output3)",,0,0
20,"def isValid(s):
    stack = []
    mapping = {')': '(', '}': '{', ']': '['}
    for char in s:
        if char in mapping:
            top_element = stack.pop() if stack else '#'
            if mapping[char] != top_element:
                return False
        else:
            stack.append(char)
    return not stack

# Test the solution with example inputs
print(isValid('()') == True)
print(isValid('()[]{}') == True)
print(isValid('(]') == False)
print(isValid('([)]') == False)
print(isValid('{[]}') == True)","True
True
True
True
True",5,0
21,"def mergeTwoLists(l1, l2):
    dummy = ListNode(0)
    current = dummy
    while l1 and l2:
        if l1.val < l2.val:
            current.next = l1
            l1 = l1.next
        else:
            current.next = l2
            l2 = l2.next
        current = current.next
    current.next = l1 or l2
    return dummy.next",,0,0
22,"def generateParenthesis(n):
    def backtrack(s, left, right):
        if len(s) == 2*n:
            res.append(s)
            return
        if left < n:
            backtrack(s+'(', left+1, right)
        if right < left:
            backtrack(s+')', left, right+1)
    res = []
    backtrack('', 0, 0)
    return res

# Test the solution with example inputs
print(generateParenthesis(3) == ['((()))','(()())','(())()','()(())','()()()'])
print(generateParenthesis(1) == ['()'])","True
True",2,0
23,"def mergeKLists(lists):
    if not lists:
        return []
    merged_list = []
    for linked_list in lists:
        while linked_list:
            merged_list.append(linked_list.val)
            linked_list = linked_list.next
    merged_list.sort()
    return merged_list

# Test the solution with example inputs
input1 = [[1,4,5],[1,3,4],[2,6]]
output1 = [1,1,2,3,4,4,5,6]
print(mergeKLists(input1) == output1)

input2 = []
output2 = []
print(mergeKLists(input2) == output2)

input3 = [[]]
output3 = []
print(mergeKLists(input3) == output3)",,0,0
24,"def swapPairs(head):
    if not head or not head.next:
        return head
    dummy = ListNode(0)
    dummy.next = head
    prev = dummy
    while head and head.next:
        first = head
        second = head.next
        prev.next = second
        first.next = second.next
        second.next = first
        prev = first
        head = first.next
    return dummy.next
",,0,0
25,"def reverseKGroup(head, k):
    def reverseLinkedList(head):
        prev = None
        curr = head
        while curr:
            next_node = curr.next
            curr.next = prev
            prev = curr
            curr = next_node
        return prev
    def getLength(head):
        length = 0
        while head:
            length += 1
            head = head.next
        return length
    dummy = ListNode(0)
    dummy.next = head
    prev_group_end = dummy
    while True:
        start = prev_group_end.next
        end = prev_group_end
        for _ in range(k):
            end = end.next
            if not end:
                return dummy.next
        next_group_start = end.next
        end.next = None
        prev_group_end.next = reverseLinkedList(start)
        start.next = next_group_start
        prev_group_end = start
    return dummy.next

# Test Cases
head1 = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5)))))
output1 = reverseKGroup(head1, 2)
print(output1 == ListNode(2, ListNode(1, ListNode(4, ListNode(3, ListNode(5))))))

head2 = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5)))))
output2 = reverseKGroup(head2, 3)
print(output2 == ListNode(3, ListNode(2, ListNode(1, ListNode(4, ListNode(5))))))

head3 = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5)))))
output3 = reverseKGroup(head3, 1)
print(output3 == ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5)))))",,0,0
,,,,
