ID,code,result,true_count,false_count
1,"def two_sum(nums, target):
    num_to_index = {}
    for index, num in enumerate(nums):
        complement = target - num
        if complement in num_to_index:
            return [num_to_index[complement], index]
        num_to_index[num] = index

# Example inputs
inputs = [
    ([2, 7, 11, 15], 9),
    ([3, 2, 4], 6),
    ([3, 3], 6)
]
outputs = [
    [0, 1],
    [1, 2],
    [0, 1]
]

for i, (input_data, expected_output) in enumerate(zip(inputs, outputs)):
    result = two_sum(*input_data)
    print(f'Input {i + 1}: {input_data}, Output: {result}, Correct: {result == expected_output}')","Input 1: ([2, 7, 11, 15], 9), Output: [0, 1], Correct: True
Input 2: ([3, 2, 4], 6), Output: [1, 2], Correct: True
Input 3: ([3, 3], 6), Output: [0, 1], Correct: True",3,0
2,"class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def addTwoNumbers(l1, l2):
    dummy_head = ListNode(0)
    current = dummy_head
    carry = 0

    while l1 or l2 or carry:
        val1 = (l1.val if l1 else 0)
        val2 = (l2.val if l2 else 0)
        total = val1 + val2 + carry
        carry = total // 10
        current.next = ListNode(total % 10)
        current = current.next
        if l1:
            l1 = l1.next
        if l2:
            l2 = l2.next

    return dummy_head.next

# Example inputs
l1_1 = ListNode(2, ListNode(4, ListNode(3)))
l2_1 = ListNode(5, ListNode(6, ListNode(4)))
output_1 = addTwoNumbers(l1_1, l2_1)

l1_2 = ListNode(0)
l2_2 = ListNode(0)
output_2 = addTwoNumbers(l1_2, l2_2)

l1_3 = ListNode(9, ListNode(9, ListNode(9, ListNode(9, ListNode(9, ListNode(9, ListNode(9)))))))
l2_3 = ListNode(9, ListNode(9, ListNode(9, ListNode(9))))
output_3 = addTwoNumbers(l1_3, l2_3)

# Expected outputs
expected_output_1 = [7, 0, 8]
expected_output_2 = [0]
expected_output_3 = [8, 9, 9, 9, 0, 0, 0, 1]

# Function to convert linked list to list for comparison

def linked_list_to_list(node):
    result = []
    while node:
        result.append(node.val)
        node = node.next
    return result

# Verify outputs
print(linked_list_to_list(output_1) == expected_output_1)  # True
print(linked_list_to_list(output_2) == expected_output_2)  # True
print(linked_list_to_list(output_3) == expected_output_3)  # True","True
True
True",3,0
3,"def length_of_longest_substring(s):
    char_set = set()
    left = 0
    max_length = 0
    for right in range(len(s)):
        while s[right] in char_set:
            char_set.remove(s[left])
            left += 1
        char_set.add(s[right])
        max_length = max(max_length, right - left + 1)
    return max_length

# Test cases
inputs = [""abcabcbb"", ""bbbbb"", ""pwwkew""]
outputs = [3, 1, 3]
for i in range(len(inputs)):
    result = length_of_longest_substring(inputs[i])
    print(result == outputs[i])","True
True
True",3,0
4,"def findMedianSortedArrays(nums1, nums2):
    nums = sorted(nums1 + nums2)
    n = len(nums)
    if n % 2 == 0:
        return (nums[n // 2 - 1] + nums[n // 2]) / 2
    else:
        return nums[n // 2]

# Example inputs
inputs = [
    ([1, 3], [2]),
    ([1, 2], [3, 4]),
    ([0, 0], [0, 0])
]
# Expected outputs
outputs = [2.00000, 2.50000, 0.00000]

# Testing the function
for (nums1, nums2), expected in zip(inputs, outputs):
    result = findMedianSortedArrays(nums1, nums2)
    print(result == expected)
","True
True
True",3,0
5,"def longest_palindrome(s):
    def expand_around_center(left, right):
        while left >= 0 and right < len(s) and s[left] == s[right]:
            left -= 1
            right += 1
        return s[left + 1:right]

    longest = """"
    for i in range(len(s)):
        odd_palindrome = expand_around_center(i, i)
        even_palindrome = expand_around_center(i, i + 1)
        longest = max(longest, odd_palindrome, even_palindrome, key=len)
    return longest

# Test cases
inputs = [""babad"", ""cbbd"", ""a""]
outputs = [""bab"", ""bb"", ""a""]
for i in range(len(inputs)):
    result = longest_palindrome(inputs[i])
    print(result == outputs[i])","True
True
True",3,0
6,"def convert(s, numRows):
    if numRows == 1 or numRows >= len(s):
        return s
    rows = [''] * numRows
    cur_row = 0
    going_down = False

    for char in s:
        rows[cur_row] += char
        if cur_row == 0:
            going_down = True
        elif cur_row == numRows - 1:
            going_down = False
        cur_row += 1 if going_down else -1

    return ''.join(rows)

# Example inputs
input_1 = (""PAYPALISHIRING"", 3)
output_1 = convert(*input_1)
print(output_1 == ""PAHNAPLSIIGYIR"")

input_2 = (""PAYPALISHIRING"", 4)
output_2 = convert(*input_2)
print(output_2 == ""PINALSIGYAHRPI"")

input_3 = (""A"", 1)
output_3 = convert(*input_3)
print(output_3 == ""A"")","True
True
True",3,0
7,"def reverse_integer(x):
    sign = -1 if x < 0 else 1
    x *= sign
    reversed_x = int(str(x)[::-1])
    if reversed_x > 2**31 - 1:
        return 0
    return sign * reversed_x

# Test cases
inputs = [123, -123, 120]
outputs = [321, -321, 21]
for i in range(len(inputs)):
    result = reverse_integer(inputs[i])
    print(result == outputs[i])","True
True
True",3,0
8,"def myAtoi(s):
    s = s.strip()
    if not s:
        return 0
    sign = 1
    index = 0
    if s[index] == '-':
        sign = -1
        index += 1
    elif s[index] == '+':
        index += 1
    result = 0
    while index < len(s) and s[index].isdigit():
        result = result * 10 + int(s[index])
        index += 1
    result *= sign
    INT_MIN, INT_MAX = -2147483648, 2147483647
    if result < INT_MIN:
        return INT_MIN
    if result > INT_MAX:
        return INT_MAX
    return result

# Test cases
inputs = [
    ""42"",
    ""   -42"",
    ""4193 with words""
]
outputs = [
    42,
    -42,
    4193
]
for i in range(len(inputs)):
    print(myAtoi(inputs[i]) == outputs[i])","True
True
True",3,0
9,"def is_palindrome(x):
    if x < 0:
        return False
    original = x
    reversed_num = 0
    while x > 0:
        reversed_num = reversed_num * 10 + x % 10
        x //= 10
    return original == reversed_num

# Test cases
inputs = [121, -121, 10]
outputs = [True, False, False]
for i in range(len(inputs)):
    print(is_palindrome(inputs[i]) == outputs[i])","True
True
True",3,0
10,"def isMatch(s: str, p: str) -> bool:
    dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]
    dp[0][0] = True

    for j in range(1, len(p) + 1):
        if p[j - 1] == '*':
            dp[0][j] = dp[0][j - 2]

    for i in range(1, len(s) + 1):
        for j in range(1, len(p) + 1):
            if p[j - 1] == s[i - 1] or p[j - 1] == '.':
                dp[i][j] = dp[i - 1][j - 1]
            elif p[j - 1] == '*':
                dp[i][j] = dp[i][j - 2] or (dp[i - 1][j] and (s[i - 1] == p[j - 2] or p[j - 2] == '.'))

    return dp[len(s)][len(p)]

# Test cases
inputs = [
    (""aa"", ""a""),
    (""aa"", ""a*""),
    (""ab"", "".*"")
]
outputs = [
    False,
    True,
    True
]

for (s, p), expected in zip(inputs, outputs):
    result = isMatch(s, p)
    print(result == expected)","True
True
True",3,0
11,"def maxArea(height):
    left, right = 0, len(height) - 1
    max_area = 0
    while left < right:
        width = right - left
        max_area = max(max_area, min(height[left], height[right]) * width)
        if height[left] < height[right]:
            left += 1
        else:
            right -= 1
    return max_area

# Example inputs
inputs = [
    [1, 8, 6, 2, 5, 4, 8, 3, 7],
    [1, 1],
    [4, 3, 2, 1, 4]
]
# Expected outputs
outputs = [49, 1, 16]

# Verification
for i in range(len(inputs)):
    result = maxArea(inputs[i])
    print(result == outputs[i])","True
True
True",3,0
12,"def int_to_roman(num):
    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    syms = [""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""]
    roman_num = ''
    i = 0
    while num > 0:
        for _ in range(num // val[i]):
            roman_num += syms[i]
            num -= val[i]
        i += 1
    return roman_num

# Test examples
inputs = [3, 4, 9]
outputs = [""III"", ""IV"", ""IX""]
for i in range(len(inputs)):
    result = int_to_roman(inputs[i])
    print(result == outputs[i])","True
True
True",3,0
13,"def roman_to_int(s):
    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    total = 0
    prev_value = 0
    for char in reversed(s):
        value = roman_dict[char]
        if value < prev_value:
            total -= value
        else:
            total += value
        prev_value = value
    return total

# Example inputs
inputs = [""III"", ""IV"", ""IX""]
outputs = [3, 4, 9]

for i in range(len(inputs)):
    result = roman_to_int(inputs[i])
    print(result == outputs[i])","True
True
True",3,0
14,"def longest_common_prefix(strs):
    if not strs:
        return """"
    prefix = strs[0]
    for s in strs[1:]:
        while s[:len(prefix)] != prefix and prefix:
            prefix = prefix[:-1]
    return prefix

# Example inputs
input_1 = [""flower"", ""flow"", ""flight""]
output_1 = longest_common_prefix(input_1)
print(output_1 == ""fl"")  # True

input_2 = [""dog"", ""racecar"", ""car""]
output_2 = longest_common_prefix(input_2)
print(output_2 == """")  # True

input_3 = []
output_3 = longest_common_prefix(input_3)
print(output_3 == """")  # True","True
True
True",3,0
15,"def three_sum(nums):
    nums.sort()
    result = []
    for i in range(len(nums) - 2):
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        left, right = i + 1, len(nums) - 1
        while left < right:
            total = nums[i] + nums[left] + nums[right]
            if total < 0:
                left += 1
            elif total > 0:
                right -= 1
            else:
                result.append([nums[i], nums[left], nums[right]])
                while left < right and nums[left] == nums[left + 1]:
                    left += 1
                while left < right and nums[right] == nums[right - 1]:
                    right -= 1
                left += 1
                right -= 1
    return result

# Example inputs
input_1 = [-1, 0, 1, 2, -1, -4]
output_1 = [[-1, -1, 2], [-1, 0, 1]]
input_2 = []
output_2 = []
input_3 = [0]
output_3 = []

# Testing the function
print(three_sum(input_1) == output_1)  # True
print(three_sum(input_2) == output_2)  # True
print(three_sum(input_3) == output_3)  # True","True
True
True",3,0
16,"def three_sum_closest(nums, target):
    nums.sort()
    closest_sum = float('inf')
    for i in range(len(nums) - 2):
        left, right = i + 1, len(nums) - 1
        while left < right:
            current_sum = nums[i] + nums[left] + nums[right]
            if abs(current_sum - target) < abs(closest_sum - target):
                closest_sum = current_sum
            if current_sum < target:
                left += 1
            elif current_sum > target:
                right -= 1
            else:
                return current_sum
    return closest_sum

# Example inputs
input_1 = ([-1, 2, 1, -4], 1)
output_1 = 2
input_2 = ([0, 0, 0], 1)
output_2 = 0
input_3 = ([-1, 0, 1, 1], 0)
output_3 = 1

# Testing the function
print(three_sum_closest(*input_1) == output_1)  # True
print(three_sum_closest(*input_2) == output_2)  # True
print(three_sum_closest(*input_3) == output_3)  # True","True
True
False",2,1
17,"def letter_combinations(digits):
    if not digits:
        return []
    phone_map = {
        '2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl',
        '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'
    }
    def backtrack(index, path):
        if index == len(digits):
            combinations.append(''.join(path))
            return
        possible_letters = phone_map[digits[index]]
        for letter in possible_letters:
            path.append(letter)
            backtrack(index + 1, path)
            path.pop()

    combinations = []
    backtrack(0, [])
    return combinations

# Test cases
inputs = [
    ""23"",
    """",
    ""2""
]
outputs = [
    [""ad"",""ae"",""af"",""bd"",""be"",""bf"",""cd"",""ce"",""cf""],
    [],
    [""a"",""b"",""c""]
]
for i in range(len(inputs)):
    result = letter_combinations(inputs[i])
    print(result == outputs[i])","True
True
True",3,0
18,"def four_sum(nums, target):
    nums.sort()
    quadruplets = set()
    n = len(nums)
    for i in range(n - 3):
        for j in range(i + 1, n - 2):
            left, right = j + 1, n - 1
            while left < right:
                total = nums[i] + nums[j] + nums[left] + nums[right]
                if total == target:
                    quadruplets.add((nums[i], nums[j], nums[left], nums[right]))
                    left += 1
                    right -= 1
                elif total < target:
                    left += 1
                else:
                    right -= 1
    return [list(quad) for quad in quadruplets]

# Example inputs
input_1 = ([1, 0, -1, 0, -2, 2], 0)
output_1 = [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]
result_1 = four_sum(*input_1) == output_1

input_2 = ([], 0)
output_2 = []
result_2 = four_sum(*input_2) == output_2

# Print results
print(result_1)
print(result_2)","False
True",1,1
19,"class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:
        dummy = ListNode(0, head)
        first = dummy
        second = dummy

        for _ in range(n + 1):
            first = first.next

        while first:
            first = first.next
            second = second.next

        second.next = second.next.next
        return dummy.next

# Example inputs
inputs = [([1, 2, 3, 4, 5], 2), ([1], 1), ([1, 2], 1)]
outputs = [[1, 2, 3, 5], [], [1]]

# Testing the solution
solution = Solution()
for (head, n), expected in zip(inputs, outputs):
    # Create linked list from head
    head_node = ListNode(head[0])
    current = head_node
    for value in head[1:]:
        current.next = ListNode(value)
        current = current.next
    result = solution.removeNthFromEnd(head_node, n)
    # Convert result linked list to Python list
    result_list = []
    while result:
        result_list.append(result.val)
        result = result.next
    print(result_list == expected)","True
True
True",3,0
20,"def is_valid(s):
    stack = []
    mapping = {')': '(', '}': '{', ']': '['}
    for char in s:
        if char in mapping:
            top_element = stack.pop() if stack else '#'
            if mapping[char] != top_element:
                return False
        else:
            stack.append(char)
    return not stack

# Test cases
inputs = [""()"", ""()[]{}"", ""(]""]
outputs = [True, True, False]
for i in range(len(inputs)):
    print(is_valid(inputs[i]) == outputs[i])","True
True
True",3,0
21,"def mergeTwoLists(l1, l2):
    dummy = ListNode(0)
    tail = dummy
    while l1 and l2:
        if l1.val < l2.val:
            tail.next = l1
            l1 = l1.next
        else:
            tail.next = l2
            l2 = l2.next
        tail = tail.next
    tail.next = l1 or l2
    return dummy.next

# Example inputs
l1_1 = [1, 2, 4]
l2_1 = [1, 3, 4]
output_1 = mergeTwoLists(l1_1, l2_1)
print(output_1 == [1, 1, 2, 3, 4, 4])  # True

l1_2 = []
l2_2 = []
output_2 = mergeTwoLists(l1_2, l2_2)
print(output_2 == [])  # True

l1_3 = []
l2_3 = [0]
output_3 = mergeTwoLists(l1_3, l2_3)
print(output_3 == [0])  # True",,0,0
22,"def generate_parentheses(n):
    def backtrack(s='', left=0, right=0):
        if len(s) == 2 * n:
            result.append(s)
            return
        if left < n:
            backtrack(s + '(', left + 1, right)
        if right < left:
            backtrack(s + ')', left, right + 1)

    result = []
    backtrack()
    return result

# Example inputs
input_1 = 3
output_1 = generate_parentheses(input_1)
expected_output_1 = [""((()))"",""(()())"",""(())()"",""()(())"",""()()()""]
print(output_1 == expected_output_1)

input_2 = 1
output_2 = generate_parentheses(input_2)
expected_output_2 = [""()""]
print(output_2 == expected_output_2)

# No third example input or output provided in the problem description.","True
True",2,0
23,"def mergeKLists(lists):
    import heapq
    min_heap = []
    for i, l in enumerate(lists):
        if l:
            heapq.heappush(min_heap, (l[0], i, 0))
    result = []
    while min_heap:
        val, list_idx, element_idx = heapq.heappop(min_heap)
        result.append(val)
        if element_idx + 1 < len(lists[list_idx]):
            next_val = lists[list_idx][element_idx + 1]
            heapq.heappush(min_heap, (next_val, list_idx, element_idx + 1))
    return result

# Example inputs
input_1 = [[1,4,5],[1,3,4],[2,6]]
output_1 = [1,1,2,3,4,4,5,6]
input_2 = []
output_2 = []
input_3 = [[]]
output_3 = []

# Testing the function
print(mergeKLists(input_1) == output_1)  # True
print(mergeKLists(input_2) == output_2)  # True
print(mergeKLists(input_3) == output_3)  # True","True
True
True",3,0
24,"class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def swapPairs(head):
    if not head or not head.next:
        return head
    new_head = head.next
    prev = None
    current = head
    while current and current.next:
        next_pair = current.next.next
        second = current.next
        second.next = current
        current.next = next_pair
        if prev:
            prev.next = second
        prev = current
        current = next_pair
    return new_head

# Test cases
inputs = [
    [1, 2, 3, 4],
    [],
    [1]
]
outputs = [
    [2, 1, 4, 3],
    [],
    [1]
]

for i in range(len(inputs)):
    head = ListNode(inputs[i][0]) if inputs[i] else None
    current = head
    for value in inputs[i][1:]:
        current.next = ListNode(value)
        current = current.next
    result = swapPairs(head)
    result_list = []
    while result:
        result_list.append(result.val)
        result = result.next
    print(result_list == outputs[i])","True
True
True",3,0
25,"class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        def reverseLinkedList(start, end):
            prev = None
            curr = start
            while curr != end:
                next_temp = curr.next
                curr.next = prev
                prev = curr
                curr = next_temp
            return prev

        dummy = ListNode(0)
        dummy.next = head
        group_prev = dummy

        while True:
            kth = group_prev
            for i in range(k):
                kth = kth.next
                if not kth:
                    return dummy.next

            group_next = kth.next
            # Reverse the group
            prev = reverseLinkedList(group_prev.next, group_next)
            # Connect with the previous part
            temp = group_prev.next
            group_prev.next = prev
            temp.next = group_next
            group_prev = temp

    # Example inputs
    def list_to_linkedlist(lst):
        dummy = ListNode(0)
        curr = dummy
        for val in lst:
            curr.next = ListNode(val)
            curr = curr.next
        return dummy.next

    def linkedlist_to_list(head):
        lst = []
        while head:
            lst.append(head.val)
            head = head.next
        return lst

    # Test cases
    inputs = [
        ([1, 2, 3, 4, 5], 2),
        ([1, 2, 3, 4, 5], 3),
        ([1, 2, 3, 4, 5], 1)
    ]
    outputs = [
        [2, 1, 4, 3, 5],
        [3, 2, 1, 4, 5],
        [1, 2, 3, 4, 5]
    ]

    sol = Solution()
    for (input_data, expected_output) in zip(inputs, outputs):
        head = list_to_linkedlist(input_data[0])
        k = input_data[1]
        result = sol.reverseKGroup(head, k)
        print(linkedlist_to_list(result) == expected_output)",,0,0
,,,,
,,,22,
