ID,code,result,true_count,false_count
1,"def solution(nums, target):
    hash_map = {}
    for index, num in enumerate(nums):
        complement = target - num
        if complement in hash_map:
            return [hash_map[complement], index]
        hash_map[num] = index


input_1 = [2, 7, 11, 15]
output_1 = [0, 1]
target_1 = 9
print(solution(input_1, target_1) == output_1)

input_2 = [3, 2, 4]
output_2 = [1, 2]
target_2 = 6
print(solution(input_2, target_2) == output_2)

input_3 = [3, 3]
output_3 = [0, 1]
target_3 = 6
print(solution(input_3, target_3) == output_3)","True
True
True",3,0
2,"# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def addTwoNumbers(l1, l2):
    dummy = ListNode(0)
    current = dummy
    carry = 0

    while l1 or l2 or carry:
        val1 = l1.val if l1 else 0
        val2 = l2.val if l2 else 0

        total = val1 + val2 + carry
        carry = total // 10
        current.next = ListNode(total % 10)

        current = current.next
        l1 = l1.next if l1 else None
        l2 = l2.next if l2 else None

    return dummy.next

def create_linked_list(lst):
    head = None
    tail = None
    for val in lst:
        if head is None:
            head = ListNode(val)
            tail = head
        else:
            tail.next = ListNode(val)
            tail = tail.next
    return head

def compare_linked_lists(l1, l2):
    while l1 and l2:
        if l1.val != l2.val:
            return False
        l1 = l1.next
        l2 = l2.next
    return l1 is None and l2 is None

# Test cases
input_1 = create_linked_list([2, 4, 3])
input_2 = create_linked_list([5, 6, 4])
output_1 = create_linked_list([7, 0, 8])
print(compare_linked_lists(addTwoNumbers(input_1, input_2), output_1))  # Expected: True

input_1 = create_linked_list([0])
input_2 = create_linked_list([0])
output_2 = create_linked_list([0])
print(compare_linked_lists(addTwoNumbers(input_1, input_2), output_2))  # Expected: True

input_1 = create_linked_list([9, 9, 9, 9, 9, 9, 9])
input_2 = create_linked_list([9, 9, 9, 9])
output_3 = create_linked_list([8, 9, 9, 9, 0, 0, 0, 1])
print(compare_linked_lists(addTwoNumbers(input_1, input_2), output_3))  # Expected: True","True
True
True",3,0
3,"def length_of_longest_substring(s):
    used = {}
    max_length = start = 0
    for i, c in enumerate(s):
        if c in used and start <= used[c]:
            start = used[c] + 1
        else:
            max_length = max(max_length, i - start + 1)
        used[c] = i
    return max_length


input_1 = ""abcabcbb""
output_1 = 3
input_2 = ""bbbbb""
output_2 = 1
input_3 = ""pwwkew""
output_3 = 3

print(length_of_longest_substring(input_1) == output_1)
print(length_of_longest_substring(input_2) == output_2)
print(length_of_longest_substring(input_3) == output_3)","True
True
True",3,0
4,"def find_median_sorted_arrays(nums1, nums2):
    m, n = len(nums1), len(nums2)
    if m > n:
        nums1, nums2, m, n = nums2, nums1, n, m
    imin, imax, half_len = 0, m, (m + n + 1) // 2
    while imin <= imax:
        i = (imin + imax) // 2
        j = half_len - i
        if i < m and nums2[j-1] > nums1[i]:
            imin = i + 1
        elif i > 0 and nums1[i-1] > nums2[j]:
            imax = i - 1
        else:
            if i == 0: max_left = nums2[j-1]
            elif j == 0: max_left = nums1[i-1]
            else: max_left = max(nums1[i-1], nums2[j-1])

            if (m + n) % 2 == 1:
                return max_left

            if i == m: min_right = nums2[j]
            elif j == n: min_right = nums1[i]
            else: min_right = min(nums1[i], nums2[j])

            return (max_left + min_right) / 2.0


# Test cases
inputs = [([1, 3], [2]), ([1, 2], [3, 4]), ([0, 0], [0, 0])]
outputs = [2.00000, 2.50000, 0.00000]

for i in range(len(inputs)):
    output = find_median_sorted_arrays(inputs[i][0], inputs[i][1])
    print(output == outputs[i])","True
True
True",3,0
5,"def longestPalindrome(s):
    n = len(s)
    if n < 2:
        return s

    dp = [[False] * n for _ in range(n)]
    for i in range(n):
        dp[i][i] = True

    max_len = 1
    start = 0
    for l in range(2, n + 1):
        for i in range(n - l + 1):
            j = i + l - 1
            if l == 2 and s[i] == s[j]:
                dp[i][j] = True
                start = i
                max_len = 2
            elif s[i] == s[j] and dp[i + 1][j - 1]:
                dp[i][j] = True
                if l > max_len:
                    start = i
                    max_len = l
    return s[start : start + max_len]


s1 = ""babad""
o1 = ""bab""
s2 = ""cbbd""
o2 = ""bb""
s3 = ""a""
o3 = ""a""

print(f""Input 1: {s1 == s1}, Output 1: {o1 == longestPalindrome(s1)}"")
print(f""Input 2: {s2 == s2}, Output 2: {o2 == longestPalindrome(s2)}"")
print(f""Input 3: {s3 == s3}, Output 3: {o3 == longestPalindrome(s3)}"")","Input 1: True, Output 1: True
Input 2: True, Output 2: True
Input 3: True, Output 3: True",6,0
6,"def convert(s, numRows):
    if numRows == 1:
        return s
    rows = [''] * numRows
    row_index = 0
    direction = 1
    for char in s:
        rows[row_index] += char
        row_index += direction
        if row_index == numRows - 1 or row_index == 0:
            direction *= -1
    return ''.join(rows)


input_1 = ""PAYPALISHIRING""
output_1 = ""PAHNAPLSIIGYIR""
input_2 = ""PAYPALISHIRING""
output_2 = ""PINALSIGYAHRPI""
input_3 = ""A""
output_3 = ""A""

print(convert(input_1, 3) == output_1)
print(convert(input_2, 4) == output_2)
print(convert(input_3, 1) == output_3)","True
True
True",3,0
7,"def reverse_integer(x):
    sign = 1 if x >= 0 else -1
    x = abs(x)
    reversed_x = 0
    while x > 0:
        reversed_x = reversed_x * 10 + x % 10
        x //= 10
    reversed_x *= sign
    if reversed_x < -2**31 or reversed_x > 2**31 - 1:
        return 0
    return reversed_x


input_1 = 123
output_1 = 321
input_2 = -123
output_2 = -321
input_3 = 120
output_3 = 21

print(reverse_integer(input_1) == output_1)
print(reverse_integer(input_2) == output_2)
print(reverse_integer(input_3) == output_3)","True
True
True",3,0
8,"def myAtoi(s):
    s = s.strip()
    if not s:
        return 0

    sign = 1
    if s[0] == '-':
        sign = -1
        s = s[1:]
    elif s[0] == '+':
        s = s[1:]

    result = 0
    for c in s:
        if not c.isdigit():
            break
        result = result * 10 + int(c)

    result *= sign
    result = max(-2**31, min(2**31 - 1, result))
    return result


input_1 = ""42""
output_1 = 42
input_2 = ""   -42""
output_2 = -42
input_3 = ""4193 with words""
output_3 = 4193

print(myAtoi(input_1) == output_1)
print(myAtoi(input_2) == output_2)
print(myAtoi(input_3) == output_3)","True
True
True",3,0
9,"def myAtoi(s):
    s = s.strip()
    if not s:
        return 0

    sign = 1
    if s[0] == '-':
        sign = -1
        s = s[1:]
    elif s[0] == '+':
        s = s[1:]

    result = 0
    for c in s:
        if not c.isdigit():
            break
        result = result * 10 + int(c)

    result *= sign
    result = max(-2**31, min(2**31 - 1, result))
    return result


input_1 = ""42""
output_1 = 42
input_2 = ""   -42""
output_2 = -42
input_3 = ""4193 with words""
output_3 = 4193

print(myAtoi(input_1) == output_1)
print(myAtoi(input_2) == output_2)
print(myAtoi(input_3) == output_3)",429 Resource has been exhausted (e.g. check quota).,ERROR,ERROR
10,"def myAtoi(s):
    s = s.strip()
    if not s:
        return 0

    sign = 1
    if s[0] == '-':
        sign = -1
        s = s[1:]
    elif s[0] == '+':
        s = s[1:]

    result = 0
    for c in s:
        if not c.isdigit():
            break
        result = result * 10 + int(c)

    result *= sign
    result = max(-2**31, min(2**31 - 1, result))
    return result


input_1 = ""42""
output_1 = 42
input_2 = ""   -42""
output_2 = -42
input_3 = ""4193 with words""
output_3 = 4193

print(myAtoi(input_1) == output_1)
print(myAtoi(input_2) == output_2)
print(myAtoi(input_3) == output_3)",429 Resource has been exhausted (e.g. check quota).,ERROR,ERROR
11,"def maxArea(height):
    max_area = 0
    left = 0
    right = len(height) - 1
    while left < right:
        current_area = min(height[left], height[right]) * (right - left)
        max_area = max(max_area, current_area)
        if height[left] < height[right]:
            left += 1
        else:
            right -= 1
    return max_area


input_1 = [1, 8, 6, 2, 5, 4, 8, 3, 7]
output_1 = 49
input_2 = [1, 1]
output_2 = 1
input_3 = [4, 3, 2, 1, 4]
output_3 = 16

print(maxArea(input_1) == output_1)
print(maxArea(input_2) == output_2)
print(maxArea(input_3) == output_3)","True
True
True",3,0
12,"# Define integer to roman mapping 
int_to_roman = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'XD', 500: 'D', 900: 'CM', 1000: 'M'}

def intToRoman(num):
    """"""
    Given an integer, convert it to a roman numeral.
    """"""
    i = 12
    result = """"
    while num != 0:
        if list(int_to_roman.keys())[i] <= num:
            result += list(int_to_roman.values())[i]
            num -= list(int_to_roman.keys())[i]
        else:
            i -= 1
    return result

# Test cases
inputs = [3, 4, 9, 58, 1994]
outputs = [""III"", ""IV"", ""IX"", ""LVIII"", ""MCMXCIV""]

for i in range(len(inputs)):
    output = intToRoman(inputs[i])
    print(output == outputs[i])","True
True
True
True
True",5,0
13,"def roman_to_integer(s):
    roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    n = len(s)
    num = roman_map[s[n - 1]]
    for i in range(n - 2, -1, -1):
        if roman_map[s[i]] >= roman_map[s[i + 1]]:
            num += roman_map[s[i]]
        else:
            num -= roman_map[s[i]]
    return num


input_1 = ""III""
output_1 = 3
input_2 = ""IV""
output_2 = 4
input_3 = ""IX""
output_3 = 9
input_4 = ""LVIII""
output_4 = 58
input_5 = ""MCMXCIV""
output_5 = 1994

print(roman_to_integer(input_1) == output_1)
print(roman_to_integer(input_2) == output_2)
print(roman_to_integer(input_3) == output_3)
print(roman_to_integer(input_4) == output_4)
print(roman_to_integer(input_5) == output_5)","True
True
True
True
True",5,0
14,"def longestCommonPrefix(strs):
    if not strs:
        return """"

    prefix = strs[0]
    for i in range(1, len(strs)):
        j = 0
        while j < len(prefix) and j < len(strs[i]) and prefix[j] == strs[i][j]:
            j += 1
        prefix = prefix[:j]
        if not prefix:
            return """"

    return prefix


input1 = [""flower"", ""flow"", ""flight""]
output1 = ""fl""
print(f'Input 1: {input1}, Output: {output1}, Result: {longestCommonPrefix(input1) == output1}')

input2 = [""dog"", ""racecar"", ""car""]
output2 = """"
print(f'Input 2: {input2}, Output: {output2}, Result: {longestCommonPrefix(input2) == output2}')","Input 1: ['flower', 'flow', 'flight'], Output: fl, Result: True
Input 2: ['dog', 'racecar', 'car'], Output: , Result: True",2,0
15,"def three_sum(nums):
    result = []
    nums.sort()
    for i in range(len(nums) - 2):
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        left, right = i + 1, len(nums) - 1
        while left < right:
            total = nums[i] + nums[left] + nums[right]
            if total < 0:
                left += 1
            elif total > 0:
                right -= 1
            else:
                result.append([nums[i], nums[left], nums[right]])
                while left < right and nums[left] == nums[left + 1]:
                    left += 1
                while left < right and nums[right] == nums[right - 1]:
                    right -= 1
                left += 1
                right -= 1
    return result


input1 = [-1, 0, 1, 2, -1, -4]
output1 = [[-1, -1, 2], [-1, 0, 1]]
print(f""Input 1: {three_sum(input1) == output1}"")

input2 = []
output2 = []
print(f""Input 2: {three_sum(input2) == output2}"")

input3 = [0]
output3 = []
print(f""Input 3: {three_sum(input3) == output3}"")","Input 1: True
Input 2: True
Input 3: True",3,0
16,"def three_sum(nums):
    result = []
    nums.sort()
    for i in range(len(nums) - 2):
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        left, right = i + 1, len(nums) - 1
        while left < right:
            total = nums[i] + nums[left] + nums[right]
            if total < 0:
                left += 1
            elif total > 0:
                right -= 1
            else:
                result.append([nums[i], nums[left], nums[right]])
                while left < right and nums[left] == nums[left + 1]:
                    left += 1
                while left < right and nums[right] == nums[right - 1]:
                    right -= 1
                left += 1
                right -= 1
    return result


input1 = [-1, 0, 1, 2, -1, -4]
output1 = [[-1, -1, 2], [-1, 0, 1]]
print(f""Input 1: {three_sum(input1) == output1}"")

input2 = []
output2 = []
print(f""Input 2: {three_sum(input2) == output2}"")

input3 = [0]
output3 = []
print(f""Input 3: {three_sum(input3) == output3}"")",429 Resource has been exhausted (e.g. check quota).,ERROR,ERROR
17,"def letterCombinations(digits):
    if not digits:
        return []

    mapping = {
        '2': 'abc',
        '3': 'def',
        '4': 'ghi',
        '5': 'jkl',
        '6': 'mno',
        '7': 'pqrs',
        '8': 'tuv',
        '9': 'wxyz'
    }

    result = ['']
    for digit in digits:
        temp = []
        for letter in mapping[digit]:
            for combination in result:
                temp.append(combination + letter)
        result = temp
    return result

digits1 = ""23""
output1 = [""ad"",""ae"",""af"",""bd"",""be"",""bf"",""cd"",""ce"",""cf""]
digits2 = """"
output2 = []
digits3 = ""2""
output3 = [""a"",""b"",""c""]
print(letterCombinations(digits1) == output1)
print(letterCombinations(digits2) == output2)
print(letterCombinations(digits3) == output3)","False
True
True",2,1
18,"def four_sum(nums, target):
    nums.sort()
    result = []
    n = len(nums)
    for i in range(n - 3):
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        for j in range(i + 1, n - 2):
            if j > i + 1 and nums[j] == nums[j - 1]:
                continue
            left, right = j + 1, n - 1
            while left < right:
                total = nums[i] + nums[j] + nums[left] + nums[right]
                if total == target:
                    result.append([nums[i], nums[j], nums[left], nums[right]])
                    left += 1
                    right -= 1
                    while left < right and nums[left] == nums[left - 1]:
                        left += 1
                    while left < right and nums[right] == nums[right + 1]:
                        right -= 1
                elif total < target:
                    left += 1
                else:
                    right -= 1
    return result


input_1 = [1, 0, -1, 0, -2, 2]
target_1 = 0
output_1 = [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]
print(four_sum(input_1, target_1) == output_1)

input_2 = []
target_2 = 0
output_2 = []
print(four_sum(input_2, target_2) == output_2)","True
True",2,0
19,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head, n):
        dummy = ListNode(0, head)
        left = dummy
        right = head

        while n > 0 and right:
            right = right.next
            n -= 1

        while right:
            left = left.next
            right = right.next

        left.next = left.next.next
        return dummy.next

def print_linked_list(head):
    result = []
    current = head
    while current:
        result.append(current.val)
        current = current.next
    return result

# Example 1
head1 = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5)))))
n1 = 2
output1 = [1, 2, 3, 5]
solution = Solution()
result1 = print_linked_list(solution.removeNthFromEnd(head1, n1))
print(result1 == output1)  # True

# Example 2
head2 = ListNode(1)
n2 = 1
output2 = []
solution = Solution()
result2 = print_linked_list(solution.removeNthFromEnd(head2, n2))
print(result2 == output2)  # True

# Example 3
head3 = ListNode(1, ListNode(2))
n3 = 1
output3 = [1]
solution = Solution()
result3 = print_linked_list(solution.removeNthFromEnd(head3, n3))
print(result3 == output3)  # True",,0,0
20,"def isValid(s):
    stack = []
    brackets = {
        ')': '(',
        '}': '{',
        ']': '['
    }

    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return len(stack) == 0

s1 = ""()""
s2 = ""()[]{}""
s3 = ""(]""
s4 = ""([)]""
s5 = ""{[]}""

print(isValid(s1) == True)
print(isValid(s2) == True)
print(isValid(s3) == False)
print(isValid(s4) == False)
print(isValid(s5) == True)","True
True
True
True
True",5,0
21,"class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def merge_two_lists(l1, l2):
    dummy = ListNode(0)
    tail = dummy

    while l1 and l2:
        if l1.val <= l2.val:
            tail.next = l1
            l1 = l1.next
        else:
            tail.next = l2
            l2 = l2.next
        tail = tail.next

    tail.next = l1 or l2
    return dummy.next

def list_to_linked_list(lst):
    dummy = ListNode(0)
    tail = dummy
    for val in lst:
        tail.next = ListNode(val)
        tail = tail.next
    return dummy.next

def linked_list_to_list(head):
    lst = []
    while head:
        lst.append(head.val)
        head = head.next
    return lst

# Test Cases
input_1 = ([1,2,4], [1,3,4])
output_1 = [1,1,2,3,4,4]

input_2 = ([], [])
output_2 = []

input_3 = ([], [0])
output_3 = [0]

# Verify the solution
print(linked_list_to_list(merge_two_lists(list_to_linked_list(input_1[0]), list_to_linked_list(input_1[1]))) == output_1)
print(linked_list_to_list(merge_two_lists(list_to_linked_list(input_2[0]), list_to_linked_list(input_2[1]))) == output_2)
print(linked_list_to_list(merge_two_lists(list_to_linked_list(input_3[0]), list_to_linked_list(input_3[1]))) == output_3)","True
True
True",3,0
22,"# Function to generate all combinations of well-formed parentheses
def generateParenthesis(n):
    result = []
    def backtrack(s='', left=0, right=0):
        if len(s) == 2 * n:
            result.append(s)
            return
        if left < n:
            backtrack(s + '(', left + 1, right)
        if right < left:
            backtrack(s + ')', left, right + 1)
    backtrack()
    return result

# Test cases
input_1 = 3
output_1 = [""((()))"",""(()())"",""(())()"",""()(())"",""()()()""]
input_2 = 1
output_2 = [""()""]

print(f'Input 1: {generateParenthesis(input_1) == output_1}')
print(f'Input 2: {generateParenthesis(input_2) == output_2}')","Input 1: True
Input 2: True",2,0
23,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists):
        if not lists or lists == [[]]:
            return []

        while len(lists) > 1:
            mergedLists = []
            for i in range(0, len(lists), 2):
                l1 = lists[i] if i < len(lists) else None
                l2 = lists[i + 1] if i + 1 < len(lists) else None
                mergedLists.append(self.mergeList(l1, l2))
            lists = mergedLists
        return lists[0]

    def mergeList(self, l1, l2):
        dummy = ListNode()
        tail = dummy

        while l1 and l2:
            if l1.val < l2.val:
                tail.next = l1
                l1 = l1.next
            else:
                tail.next = l2
                l2 = l2.next
            tail = tail.next

        tail.next = l1 or l2
        return dummy.next

def createLinkedList(values):
    if not values:
        return None
    head = ListNode(values[0])
    current = head
    for i in range(1, len(values)):
        current.next = ListNode(values[i])
        current = current.next
    return head

def areLinkedListsEqual(l1, l2):
    while l1 and l2:
        if l1.val != l2.val:
            return False
        l1 = l1.next
        l2 = l2.next
    return l1 is None and l2 is None

# Example input and output
input1 = [[1,4,5],[1,3,4],[2,6]]
output1 = [1,1,2,3,4,4,5,6]
input2 = []
output2 = []
input3 = [[]]
output3 = []

# Convert to linked lists for testing
input1 = [createLinkedList(l) for l in input1]
output1 = createLinkedList(output1)
input2 = [createLinkedList(l) for l in input2]
output2 = createLinkedList(output2)
input3 = [createLinkedList(l) for l in input3]
output3 = createLinkedList(output3)

solution = Solution()
print(f""Input 1: {areLinkedListsEqual(solution.mergeKLists(input1), output1)}"")
print(f""Input 2: {areLinkedListsEqual(solution.mergeKLists(input2), output2)}"")
print(f""Input 3: {areLinkedListsEqual(solution.mergeKLists(input3), output3)}"")",,0,0
24,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def swapPairs(self, head: ListNode) -> ListNode:
        dummy = ListNode(0, head)
        prev, curr = dummy, head

        while curr and curr.next:
            # save pointers
            nxt = curr.next
            tmp = nxt.next

            # swap nodes
            curr.next = tmp
            nxt.next = curr
            prev.next = nxt

            # update pointers
            prev = curr
            curr = tmp

        return dummy.next

# Example inputs and expected outputs
inputs = [[1,2,3,4], [], [1]]
outputs = [[2,1,4,3], [], [1]]

# Test the solution with example inputs
for i in range(len(inputs)):
    # Create linked list from input
    head = ListNode(inputs[i][0]) if inputs[i] else None
    curr = head
    for j in range(1, len(inputs[i])):
        curr.next = ListNode(inputs[i][j])
        curr = curr.next
    
    # Swap nodes in pairs
    sol = Solution()
    result_head = sol.swapPairs(head)

    # Convert result linked list to list for comparison
    result = []
    while result_head:
        result.append(result_head.val)
        result_head = result_head.next

    # Compare output to expected output
    print(result == outputs[i])",,0,0
25,"class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def reverse_k_group(head, k):
    dummy = ListNode(0, head)
    group_prev = dummy

    while True:
        kth = get_kth(group_prev, k)
        if not kth:
            break
        group_next = kth.next

        # reverse group
        prev, curr = kth.next, group_prev.next
        while curr != group_next:
            tmp = curr.next
            curr.next = prev
            prev = curr
            curr = tmp

        # connect with previous and next groups
        tmp = group_prev.next
        group_prev.next = kth
        group_prev = tmp

    return dummy.next

def get_kth(curr, k):
    while curr and k > 0:
        curr = curr.next
        k -= 1
    return curr

def create_linked_list(values):
    if not values:
        return None
    head = ListNode(values[0])
    curr = head
    for val in values[1:]:
        curr.next = ListNode(val)
        curr = curr.next
    return head

def linked_list_to_list(head):
    result = []
    curr = head
    while curr:
        result.append(curr.val)
        curr = curr.next
    return result

# Test Cases
inputs = [
    ([1, 2, 3, 4, 5], 2),
    ([1, 2, 3, 4, 5], 3),
    ([1, 2, 3, 4, 5], 1),
    ([1], 1)
]
outputs = [
    [2, 1, 4, 3, 5],
    [3, 2, 1, 4, 5],
    [1, 2, 3, 4, 5],
    [1]
]

for i in range(len(inputs)):
    head = create_linked_list(inputs[i][0])
    k = inputs[i][1]
    result = linked_list_to_list(reverse_k_group(head, k))
    print(result == outputs[i])","True
True
True
True",4,0
