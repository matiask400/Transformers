ID,code,result,true_count,false_count
1,"def two_sum(nums, target):
    hashmap = {}
    for i in range(len(nums)):
        complement = target - nums[i]
        if complement in hashmap:
            return [i, hashmap[complement]]
        hashmap[nums[i]] = i


input_1 = [2,7,11,15]
target_1 = 9
output_1 = [0,1]
print(two_sum(input_1, target_1) == output_1)

input_2 = [3,2,4]
target_2 = 6
output_2 = [1,2]
print(two_sum(input_2, target_2) == output_2)

input_3 = [3,3]
target_3 = 6
output_3 = [0,1]
print(two_sum(input_3, target_3) == output_3)","False
False
False",0,3
2,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1, l2):
        dummy = ListNode(0)
        curr = dummy
        carry = 0

        while l1 or l2 or carry:
            val1 = l1.val if l1 else 0
            val2 = l2.val if l2 else 0

            total = val1 + val2 + carry
            carry = total // 10
            curr.next = ListNode(total % 10)

            curr = curr.next
            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None

        return dummy.next

def print_linked_list(head):
    result = []
    while head:
        result.append(head.val)
        head = head.next
    return result

def test_solution(l1_vals, l2_vals, expected_output):
    l1 = ListNode(0)
    curr = l1
    for val in l1_vals:
        curr.next = ListNode(val)
        curr = curr.next
    l1 = l1.next

    l2 = ListNode(0)
    curr = l2
    for val in l2_vals:
        curr.next = ListNode(val)
        curr = curr.next
    l2 = l2.next

    solution = Solution()
    result = solution.addTwoNumbers(l1, l2)
    output = print_linked_list(result)
    return output == expected_output

# Test cases
input_1 = [2, 4, 3]
input_2 = [5, 6, 4]
output_1 = [7, 0, 8]
print(f""Input 1: True"" if test_solution(input_1, input_2, output_1) else f""Input 1: False"")

input_1 = [0]
input_2 = [0]
output_2 = [0]
print(f""Input 2: True"" if test_solution(input_1, input_2, output_2) else f""Input 2: False"")

input_1 = [9,9,9,9,9,9,9]
input_2 = [9,9,9,9]
output_3 = [8,9,9,9,0,0,0,1]
print(f""Input 3: True"" if test_solution(input_1, input_2, output_3) else f""Input 3: False"")",,0,0
3,"def length_of_longest_substring(s: str) -> int:
    char_set = set()
    l = 0
    max_len = 0
    for r in range(len(s)):
        while s[r] in char_set:
            char_set.remove(s[l])
            l += 1
        char_set.add(s[r])
        max_len = max(max_len, r - l + 1)
    return max_len


# Test cases
input1 = ""abcabcbb""
output1 = 3
input2 = ""bbbbb""
output2 = 1
input3 = ""pwwkew""
output3 = 3

print(length_of_longest_substring(input1) == output1)
print(length_of_longest_substring(input2) == output2)
print(length_of_longest_substring(input3) == output3)","True
True
True",3,0
4,"class Solution:
    def findMedianSortedArrays(self, nums1, nums2):
        m, n = len(nums1), len(nums2)
        if m > n:
            nums1, nums2, m, n = nums2, nums1, n, m
        imin, imax, half_len = 0, m, (m + n + 1) // 2

        while imin <= imax:
            i = (imin + imax) // 2
            j = half_len - i
            if i < m and nums2[j - 1] > nums1[i]:
                imin = i + 1
            elif i > 0 and nums1[i - 1] > nums2[j]:
                imax = i - 1
            else:
                if i == 0: max_left = nums2[j - 1]
                elif j == 0: max_left = nums1[i - 1]
                else: max_left = max(nums1[i - 1], nums2[j - 1])

                if (m + n) % 2 == 1:
                    return max_left

                if i == m: min_right = nums2[j]
                elif j == n: min_right = nums1[i]
                else: min_right = min(nums1[i], nums2[j])

                return (max_left + min_right) / 2.0

test_cases = [
    (([1, 3], [2]), 2.00000),
    (([1, 2], [3, 4]), 2.50000),
    (([0, 0], [0, 0]), 0.00000),
    (([], [1]), 1.00000),
    (([2], []), 2.00000),
]

s = Solution()
for i, (input_data, expected_output) in enumerate(test_cases):
    nums1, nums2 = input_data
    result = s.findMedianSortedArrays(nums1, nums2)
    print(f""Test Case {i+1}: {'True' if result == expected_output else 'False'}"")","Test Case 1: True
Test Case 2: True
Test Case 3: True
Test Case 4: True
Test Case 5: True",5,0
5,"def longestPalindrome(s: str) -> str:
    n = len(s)
    if n < 2:
        return s
    dp = [[False] * n for _ in range(n)]
    for i in range(n):
        dp[i][i] = True
    max_len = 1
    start = 0
    for l in range(2, n + 1):
        for i in range(n - l + 1):
            end = i + l - 1
            if l == 2 and s[i] == s[end]:
                dp[i][end] = True
                start = i
                max_len = l
            elif s[i] == s[end] and dp[i + 1][end - 1]:
                dp[i][end] = True
                start = i
                max_len = l
    return s[start:start + max_len]


# Test the solution
inputs = [
    ""babad"",
    ""cbbd"",
    ""a"",
    ""ac""
]
outputs = [
    ""bab"",
    ""bb"",
    ""a"",
    ""a""
]

for i in range(len(inputs)):
    output = longestPalindrome(inputs[i])
    print(output == outputs[i])","False
True
True
True",3,1
6,"def convert(s, numRows):
    if numRows == 1 or numRows >= len(s):
        return s
    rows = [''] * numRows
    row_index = 0
    direction = 1  # 1 for down, -1 for up
    for char in s:
        rows[row_index] += char
        if row_index == numRows - 1:
            direction = -1
        elif row_index == 0:
            direction = 1
        row_index += direction
    return ''.join(rows)


# Test cases
input_1 = ""PAYPALISHIRING""
input_2 = ""PAYPALISHIRING""
input_3 = ""A""
output_1 = ""PAHNAPLSIIGYIR""
output_2 = ""PINALSIGYAHRPI""
output_3 = ""A""

print(convert(input_1, 3) == output_1)
print(convert(input_2, 4) == output_2)
print(convert(input_3, 1) == output_3)","True
True
True",3,0
7,"def reverse_integer(x):
    sign = 1 if x >= 0 else -1
    x = abs(x)
    reversed_x = 0

    while x > 0:
        digit = x % 10
        reversed_x = reversed_x * 10 + digit
        x //= 10

    reversed_x *= sign

    if reversed_x < -2**31 or reversed_x > 2**31 - 1:
        return 0
    else:
        return reversed_x

# Test cases
inputs = [123, -123, 120, 0]
outputs = [321, -321, 21, 0]

for i in range(len(inputs)):
    result = reverse_integer(inputs[i])
    print(f'Input: {inputs[i]}, Expected Output: {outputs[i]}, Result: {result}, Correct: {result == outputs[i]}')","Input: 123, Expected Output: 321, Result: 321, Correct: True
Input: -123, Expected Output: -321, Result: -321, Correct: True
Input: 120, Expected Output: 21, Result: 21, Correct: True
Input: 0, Expected Output: 0, Result: 0, Correct: True",4,0
8,"def myAtoi(s):
    s = s.strip()
    if len(s) == 0:
        return 0
    sign = 1
    if s[0] == '-':
        sign = -1
        s = s[1:]
    elif s[0] == '+':
        s = s[1:]
    num = 0
    for c in s:
        if c.isdigit():
            num = num * 10 + int(c)
        else:
            break
    return max(min(sign * num, 2**31 - 1), -2**31)


# Test cases
inputs = [
    ""42"",
    ""   -42"",
    ""4193 with words"",
    ""words and 987"",
    ""-91283472332""
]
outputs = [
    42,
    -42,
    4193,
    0,
    -2147483648
]

for i in range(len(inputs)):
    output = myAtoi(inputs[i])
    print(output == outputs[i])","True
True
True
True
True",5,0
9,"def isPalindrome(x):
    if x < 0:
        return False
    div = 1
    while x // div >= 10:
        div *= 10
    while x > 0:
        left = x // div
        right = x % 10
        if left != right:
            return False
        x = (x % div) // 10
        div //= 100
    return True

print(isPalindrome(121) == True)
print(isPalindrome(-121) == False)
print(isPalindrome(10) == False)","True
True
True",3,0
10,"import re

def isMatch(s: str, p: str) -> bool:
    return re.fullmatch(p, s) is not None


# Test Cases

s1 = ""aa""
p1 = ""a""
output1 = isMatch(s1, p1)
expected_output1 = False
print(f""Test Case 1 Result: {output1 == expected_output1}"")

s2 = ""aa""
p2 = ""a*""
output2 = isMatch(s2, p2)
expected_output2 = True
print(f""Test Case 2 Result: {output2 == expected_output2}"")

s3 = ""ab""
p3 = "".*""
output3 = isMatch(s3, p3)
expected_output3 = True
print(f""Test Case 3 Result: {output3 == expected_output3}"")","Test Case 1 Result: True
Test Case 2 Result: True
Test Case 3 Result: True",3,0
11,"def maxArea(height):
    l, r = 0, len(height) - 1
    max_area = 0
    while l < r:
        current_area = min(height[l], height[r]) * (r - l)
        max_area = max(max_area, current_area)
        if height[l] < height[r]:
            l += 1
        else:
            r -= 1
    return max_area


input_1 = [1, 8, 6, 2, 5, 4, 8, 3, 7]
output_1 = 49
input_2 = [1, 1]
output_2 = 1
input_3 = [4, 3, 2, 1, 4]
output_3 = 16

print(f""Input 1: {input_1}, Output 1: {output_1}, Result: {maxArea(input_1) == output_1}"")
print(f""Input 2: {input_2}, Output 2: {output_2}, Result: {maxArea(input_2) == output_2}"")
print(f""Input 3: {input_3}, Output 3: {output_3}, Result: {maxArea(input_3) == output_3}"")","Input 1: [1, 8, 6, 2, 5, 4, 8, 3, 7], Output 1: 49, Result: True
Input 2: [1, 1], Output 2: 1, Result: True
Input 3: [4, 3, 2, 1, 4], Output 3: 16, Result: True",3,0
12,"def intToRoman(num):
    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    roman = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']
    result = ''
    i = 0
    while num > 0:
        for _ in range(num // values[i]):
            result += roman[i]
            num -= values[i]
        i += 1
    return result

# Test cases
inputs = [3, 4, 9, 58, 1994]
outputs = ['III', 'IV', 'IX', 'LVIII', 'MCMXCIV']

for i in range(len(inputs)):
    print(intToRoman(inputs[i]) == outputs[i])","True
True
True
True
True",5,0
13,"def roman_to_integer(s: str) -> int:
    roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    n = len(s)
    num = 0
    i = 0
    while i < n:
        if i + 1 < n and roman_map[s[i]] < roman_map[s[i + 1]]:
            num += roman_map[s[i + 1]] - roman_map[s[i]]
            i += 2
        else:
            num += roman_map[s[i]]
            i += 1
    return num


input_1 = ""III""
output_1 = 3
print(f""Input: {input_1}, Output: {roman_to_integer(input_1)}, Expected: {output_1}, Result: {roman_to_integer(input_1) == output_1}"")

input_2 = ""IV""
output_2 = 4
print(f""Input: {input_2}, Output: {roman_to_integer(input_2)}, Expected: {output_2}, Result: {roman_to_integer(input_2) == output_2}"")

input_3 = ""IX""
output_3 = 9
print(f""Input: {input_3}, Output: {roman_to_integer(input_3)}, Expected: {output_3}, Result: {roman_to_integer(input_3) == output_3}"")","Input: III, Output: 3, Expected: 3, Result: True
Input: IV, Output: 4, Expected: 4, Result: True
Input: IX, Output: 9, Expected: 9, Result: True",3,0
14,"def longestCommonPrefix(strs):
    if not strs:
        return """"

    prefix = strs[0]
    for i in range(1, len(strs)):
        j = 0
        while j < len(prefix) and j < len(strs[i]) and prefix[j] == strs[i][j]:
            j += 1
        prefix = prefix[:j]
        if not prefix:
            return """"
    return prefix


input1 = [""flower"",""flow"",""flight""]
output1 = ""fl""
print(f""Input 1: {input1}, Output: {output1 == longestCommonPrefix(input1)}"")

input2 = [""dog"",""racecar"",""car""]
output2 = """"
print(f""Input 2: {input2}, Output: {output2 == longestCommonPrefix(input2)}"")","Input 1: ['flower', 'flow', 'flight'], Output: True
Input 2: ['dog', 'racecar', 'car'], Output: True",2,0
15,"def three_sum(nums):
    res = []
    nums.sort()
    for i in range(len(nums)-2):
        if i > 0 and nums[i] == nums[i-1]:
            continue
        l, r = i+1, len(nums)-1
        while l < r:
            s = nums[i] + nums[l] + nums[r]
            if s < 0:
                l += 1
            elif s > 0:
                r -= 1
            else:
                res.append((nums[i], nums[l], nums[r]))
                while l < r and nums[l] == nums[l+1]:
                    l += 1
                while l < r and nums[r] == nums[r-1]:
                    r -= 1
                l += 1
                r -= 1
    return res


input_value_1 = [-1,0,1,2,-1,-4]
output_value_1 = [[-1,-1,2],[-1,0,1]]
input_value_2 = []
output_value_2 = []
input_value_3 = [0]
output_value_3 = []

print(three_sum(input_value_1) == output_value_1)
print(three_sum(input_value_2) == output_value_2)
print(three_sum(input_value_3) == output_value_3)","False
True
True",2,1
16,"# Solution
def three_sum_closest(nums, target):
    nums.sort()
    closest_sum = float('inf')

    for i in range(len(nums) - 2):
        left = i + 1
        right = len(nums) - 1

        while left < right:
            current_sum = nums[i] + nums[left] + nums[right]

            if abs(current_sum - target) < abs(closest_sum - target):
                closest_sum = current_sum

            if current_sum < target:
                left += 1
            elif current_sum > target:
                right -= 1
            else:
                return closest_sum

    return closest_sum


# Example Input 1
nums1 = [-1, 2, 1, -4]
target1 = 1
# Expected Output 1
output1 = 2
# Test
print(three_sum_closest(nums1, target1) == output1)
",True,1,0
17,"def letter_combinations(digits):
    if not digits:
        return []

    mapping = {
        '2': 'abc',
        '3': 'def',
        '4': 'ghi',
        '5': 'jkl',
        '6': 'mno',
        '7': 'pqrs',
        '8': 'tuv',
        '9': 'wxyz'
    }

    result = ['']
    for digit in digits:
        result = [prefix + letter for prefix in result for letter in mapping[digit]]
    return result


# Test cases
digits1 = ""23""
output1 = [""ad"",""ae"",""af"",""bd"",""be"",""bf"",""cd"",""ce"",""cf""]
digits2 = """"
output2 = []
digits3 = ""2""
output3 = [""a"",""b"",""c""]

print(letter_combinations(digits1) == output1)  
print(letter_combinations(digits2) == output2)  
print(letter_combinations(digits3) == output3)  ","True
True
True",3,0
18,"def four_sum(nums, target):
    nums.sort()
    result = []
    n = len(nums)
    for i in range(n - 3):
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        for j in range(i + 1, n - 2):
            if j > i + 1 and nums[j] == nums[j - 1]:
                continue
            left = j + 1
            right = n - 1
            while left < right:
                total = nums[i] + nums[j] + nums[left] + nums[right]
                if total == target:
                    result.append([nums[i], nums[j], nums[left], nums[right]])
                    left += 1
                    right -= 1
                    while left < right and nums[left] == nums[left - 1]:
                        left += 1
                    while left < right and nums[right] == nums[right + 1]:
                        right -= 1
                elif total < target:
                    left += 1
                else:
                    right -= 1
    return result


input_values = [
    ([1, 0, -1, 0, -2, 2], 0),
    ([], 0),
]

expected_outputs = [
    [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]],
    []
]

for i, (input_val, expected_output) in enumerate(zip(input_values, expected_outputs)):
    print(f""Test Case {i + 1}: {four_sum(input_val[0], input_val[1]) == expected_output}"")","Test Case 1: True
Test Case 2: True",2,0
19,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head, n):
        dummy = ListNode(0, head)
        slow = dummy
        fast = head
        
        for i in range(n):
            fast = fast.next
            
        while fast:
            slow = slow.next
            fast = fast.next
            
        slow.next = slow.next.next
        
        return dummy.next

def print_linked_list(head):
    current = head
    values = []
    while current:
        values.append(current.val)
        current = current.next
    print(values)

# Example usage and verification:
head1 = ListNode(1)
head1.next = ListNode(2)
head1.next.next = ListNode(3)
head1.next.next.next = ListNode(4)
head1.next.next.next.next = ListNode(5)
result1 = Solution().removeNthFromEnd(head1, 2)
print(result1 == [1, 2, 3, 5])

head2 = ListNode(1)
result2 = Solution().removeNthFromEnd(head2, 1)
print(result2 == [])

head3 = ListNode(1)
head3.next = ListNode(2)
result3 = Solution().removeNthFromEnd(head3, 1)
print(result3 == [1])",,0,0
20,"def isValid(s):
    stack = []
    brackets = {"")"": ""("", ""]"": ""["", ""}"": ""{""}
    for char in s:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if stack and brackets[char] == stack[-1]:
                stack.pop()
            else:
                return False
        else:
            return False
    return len(stack) == 0


s1 = ""()""
s2 = ""()[]{}""
s3 = ""(]""
s4 = ""([)]""
s5 = ""{[]}""

print(isValid(s1) == True)
print(isValid(s2) == True)
print(isValid(s3) == False)
print(isValid(s4) == False)
print(isValid(s5) == True)","True
True
True
True
True",5,0
21,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        dummy = ListNode(0)
        current = dummy

        while l1 and l2:
            if l1.val <= l2.val:
                current.next = l1
                l1 = l1.next
            else:
                current.next = l2
                l2 = l2.next
            current = current.next

        if l1:
            current.next = l1
        else:
            current.next = l2

        return dummy.next

def list_to_linked_list(lst):
    dummy = ListNode(0)
    current = dummy
    for val in lst:
        current.next = ListNode(val)
        current = current.next
    return dummy.next

def linked_list_to_list(head):
    lst = []
    while head:
        lst.append(head.val)
        head = head.next
    return lst

# Test cases
inputs = [([1,2,4], [1,3,4]), ([], []), ([], [0])]
outputs = [[1,1,2,3,4,4], [], [0]]

# Run tests
for i in range(len(inputs)):
    l1 = list_to_linked_list(inputs[i][0])
    l2 = list_to_linked_list(inputs[i][1])
    result = Solution().mergeTwoLists(l1, l2)
    output = linked_list_to_list(result)
    print(output == outputs[i])",,0,0
22,"def generateParenthesis(n):
    result = []
    def backtrack(s, left, right):
        if len(s) == 2 * n:
            result.append(s)
            return
        if left < n:
            backtrack(s + '(', left + 1, right)
        if right < left:
            backtrack(s + ')', left, right + 1)
    backtrack('', 0, 0)
    return result

# Test cases
inputs = [3, 1]
outputs = [[""((()))"",""(()())"",""(())()"",""()(())"",""()()()""], [""()""]]

for i in range(len(inputs)):
    output = generateParenthesis(inputs[i])
    print(output == outputs[i])","True
True",2,0
23,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists):
        if not lists or len(lists) == 0:
            return None

        while len(lists) > 1:
            mergedLists = []
            for i in range(0, len(lists), 2):
                l1 = lists[i]
                l2 = lists[i + 1] if (i + 1) < len(lists) else None
                mergedLists.append(self.mergeList(l1, l2))
            lists = mergedLists
        return lists[0]

    def mergeList(self, l1, l2):
        dummy = ListNode()
        tail = dummy

        while l1 and l2:
            if l1.val < l2.val:
                tail.next = l1
                l1 = l1.next
            else:
                tail.next = l2
                l2 = l2.next
            tail = tail.next

        if l1:
            tail.next = l1
        if l2:
            tail.next = l2
        return dummy.next

def create_linked_list(values):
    if not values:
        return None
    head = ListNode(values[0])
    current = head
    for val in values[1:]:
        current.next = ListNode(val)
        current = current.next
    return head

def compare_linked_lists(l1, l2):
    while l1 and l2:
        if l1.val != l2.val:
            return False
        l1 = l1.next
        l2 = l2.next
    return l1 is None and l2 is None


input1 = [[1,4,5],[1,3,4],[2,6]]
output1 = [1,1,2,3,4,4,5,6]
input2 = []
output2 = []
input3 = [[]]
output3 = []


solution = Solution()
print(compare_linked_lists(solution.mergeKLists([create_linked_list(l) for l in input1]), create_linked_list(output1)))
print(compare_linked_lists(solution.mergeKLists([create_linked_list(l) for l in input2]), create_linked_list(output2)))
print(compare_linked_lists(solution.mergeKLists([create_linked_list(l) for l in input3]), create_linked_list(output3)))
",,0,0
24,"# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def swapPairs(self, head: ListNode) -> ListNode:
        dummy = ListNode(0, head)
        prev, curr = dummy, head

        while curr and curr.next:
            # Save pointers
            nxtPair = curr.next.next
            second = curr.next

            # Reverse this pair
            second.next = curr
            curr.next = nxtPair
            prev.next = second

            # Move forward
            prev = curr
            curr = nxtPair
        
        return dummy.next

def print_linked_list(head):
    current = head
    values = []
    while current:
        values.append(current.val)
        current = current.next
    return values

# Test cases
head1 = ListNode(1, ListNode(2, ListNode(3, ListNode(4))))
output1 = [2, 1, 4, 3]
print(f""Input 1: {print_linked_list(head1) == [1, 2, 3, 4]}"")
head1 = Solution().swapPairs(head1)
print(f""Output 1: {print_linked_list(head1) == output1}"")

head2 = None
output2 = []
print(f""Input 2: {print_linked_list(head2) == []}"")
head2 = Solution().swapPairs(head2)
print(f""Output 2: {print_linked_list(head2) == output2}"")

head3 = ListNode(1)
output3 = [1]
print(f""Input 3: {print_linked_list(head3) == [1]}"")
head3 = Solution().swapPairs(head3)
print(f""Output 3: {print_linked_list(head3) == output3}"")",,0,0
25,"class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def reverse_k_group(head, k):
    dummy = ListNode(0, head)
    group_prev = dummy

    while True:
        kth = get_kth(group_prev, k)
        if not kth:
            break
        group_next = kth.next

        # reverse group
        prev, curr = kth.next, group_prev.next
        while curr != group_next:
            tmp = curr.next
            curr.next = prev
            prev = curr
            curr = tmp

        # connect with previous and next groups
        tmp = group_prev.next
        group_prev.next = kth
        group_prev = tmp

    return dummy.next

def get_kth(curr, k):
    while curr and k > 0:
        curr = curr.next
        k -= 1
    return curr

def create_linked_list(values):
    if not values:
        return None
    head = ListNode(values[0])
    current = head
    for value in values[1:]:
        current.next = ListNode(value)
        current = current.next
    return head

def linked_list_to_list(head):
    result = []
    current = head
    while current:
        result.append(current.val)
        current = current.next
    return result

# Test cases
test_cases = [
    ([1, 2, 3, 4, 5], 2, [2, 1, 4, 3, 5]),
    ([1, 2, 3, 4, 5], 3, [3, 2, 1, 4, 5]),
    ([1, 2, 3, 4, 5], 1, [1, 2, 3, 4, 5]),
    ([1], 1, [1]),
]

for i, (input_list, k, expected_output) in enumerate(test_cases):
    head = create_linked_list(input_list)
    result_head = reverse_k_group(head, k)
    result_list = linked_list_to_list(result_head)
    print(f'Test case {i+1}: {result_list == expected_output}')","Test case 1: True
Test case 2: True
Test case 3: True
Test case 4: True",4,0
,,,,
,,,,
,,,,
,,,,
,,,,
