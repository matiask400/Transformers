ID,code,result,true_count,false_count
1,"def two_sum(nums, target):
    lookup = {}
    for i, num in enumerate(nums):
        if target - num in lookup:
            return [lookup[target - num], i]
        lookup[num] = i

test_cases = [
    (([2, 7, 11, 15], 9), [0, 1]),
    (([3, 2, 4], 6), [1, 2]),
    (([3, 3], 6), [0, 1])
]

for inputs, expected in test_cases:
    result = two_sum(*inputs)
    print(result == expected)","True
True
True",3,0
2,"class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def addTwoNumbers(l1, l2):
    dummy = ListNode()
    current = dummy
    carry = 0

    while l1 or l2 or carry:
        val1 = (l1.val if l1 else 0)
        val2 = (l2.val if l2 else 0)
        carry, out = divmod(val1 + val2 + carry, 10)

        current.next = ListNode(out)
        current = current.next

        l1 = (l1.next if l1 else None)
        l2 = (l2.next if l2 else None)

    return dummy.next

def list_to_nodes(lst):
    dummy = ListNode()
    current = dummy
    for value in lst:
        current.next = ListNode(value)
        current = current.next
    return dummy.next

# Test cases
inputs = [([2,4,3], [5,6,4]), ([0], [0]), ([9,9,9,9,9,9,9], [9,9,9,9])]
expected_outputs = [[7,0,8], [0], [8,9,9,9,0,0,0,1]]
results = []

for input_pair, expected in zip(inputs, expected_outputs):
    l1, l2 = map(list_to_nodes, input_pair)
    result = addTwoNumbers(l1, l2)
    result_list = []
    while result:
        result_list.append(result.val)
        result = result.next
    results.append(result_list == expected)

for result in results:
    print(result)","True
True
True",3,0
3,"def longest_substring_without_repeating_characters(s):\n    char_map = {}\n    max_len = 0\n    start = 0\n    for i, char in enumerate(s):\n        if char in char_map and char_map[char] >= start:\n            start = char_map[char] + 1\n        char_map[char] = i\n        max_len = max(max_len, i - start + 1)\n    return max_len\n\n# Test cases\nprint(longest_substring_without_repeating_characters('abcabcbb') == 3)\nprint(longest_substring_without_repeating_characters('bbbbb') == 1)\nprint(longest_substring_without_repeating_characters('pwwkew') == 3)\n",,0,0
4,"def findMedianSortedArrays(nums1, nums2):
    n = nums1 + nums2
    n.sort()
    l = len(n)
    if l % 2 == 1:
        return float(n[l // 2])
    else:
        return float((n[l // 2 - 1] + n[l // 2]) / 2)

# Test Cases
inputs = [([1,3], [2]), ([1,2], [3,4]), ([0,0], [0,0])]
outputs = [2.00000, 2.50000, 0.00000]
results = []

for i, (nums1, nums2) in enumerate(inputs):
    result = findMedianSortedArrays(nums1, nums2)
    results.append(result == outputs[i])

print(results)","[True, True, True]",3,0
5,"def longest_palindromic_substring(s):
    def expand_around_center(left, right):
        while left >= 0 and right < len(s) and s[left] == s[right]:
            left -= 1
            right += 1
        return s[left+1:right]

    result = ''
    for i in range(len(s)):
        odd_pal = expand_around_center(i, i)
        if len(odd_pal) > len(result):
            result = odd_pal
        even_pal = expand_around_center(i, i+1)
        if len(even_pal) > len(result):
            result = even_pal
    return result

# Test cases
inputs = ['babad', 'cbbd', 'a']
outputs = ['bab', 'bb', 'a']
for i, input_val in enumerate(inputs):
    result = longest_palindromic_substring(input_val)
    print('Test', i+1, ':', result in outputs[i])
","Test 1 : True
Test 2 : True
Test 3 : True",3,0
6,"def convert(s, numRows):
    if numRows == 1 or numRows >= len(s):
        return s

    rows = ['' for _ in range(numRows)]
    current_row = 0
    going_down = False

    for char in s:
        rows[current_row] += char
        if current_row == 0 or current_row == numRows - 1:
            going_down = not going_down
        current_row += 1 if going_down else -1

    return ''.join(rows)

# Test cases
print(convert('PAYPALISHIRING', 3) == 'PAHNAPLSIIGYIR')
print(convert('PAYPALISHIRING', 4) == 'PINALSIGYAHRPI')
print(convert('A', 1) == 'A')","True
True
True",3,0
7,"def reverse_integer(x):
    INT_MAX = 2**31 - 1
    INT_MIN = -2**31
    rev = 0
    sign = 1 if x >= 0 else -1
    x = abs(x)
    while x != 0:
        pop = x % 10
        x //= 10
        if rev > INT_MAX // 10 or (rev == INT_MAX // 10 and pop > 7):
            return 0
        if rev < INT_MIN // 10 or (rev == INT_MIN // 10 and pop < -8):
            return 0
        rev = rev * 10 + pop
    return sign * rev

x1 = 123
output1 = 321
result1 = reverse_integer(x1) == output1
print('Test input 1:', result1)

x2 = -123
output2 = -321
result2 = reverse_integer(x2) == output2
print('Test input 2:', result2)

x3 = 120
output3 = 21
result3 = reverse_integer(x3) == output3
print('Test input 3:', result3)","Test input 1: True
Test input 2: True
Test input 3: True",3,0
8,"def myAtoi(s: str) -> int:
    i, n, result, sign = 0, len(s), 0, 1
    int_max, int_min = 2**31 - 1, -2**31

    # Read and ignore leading whitespace
    while i < n and s[i] == ' ':
        i += 1

    # Check sign
    if i < n and (s[i] == '+' or s[i] == '-'):
        sign = -1 if s[i] == '-' else 1
        i += 1

    # Read numbers until non-digit
    while i < n and s[i].isdigit():
        digit = ord(s[i]) - ord('0')
        # Check for overflow/underflow
        if result > (int_max - digit) // 10:
            return int_min if sign == -1 else int_max
        result = 10 * result + digit
        i += 1

    return sign * result

# Test cases
inputs = ['42', '   -42', '4193 with words']
expected_outputs = [42, -42, 4193]

# Evaluate
results = [myAtoi(inp) == exp for inp, exp in zip(inputs, expected_outputs)]
for result in results:
    print(result)","True
True
True",3,0
9,"def is_palindrome(x):
    if x < 0:
        return False
    original = x
    reversed_x = 0
    while x > 0:
        reversed_x = reversed_x * 10 + x % 10
        x //= 10
    return original == reversed_x

# Test cases
print(is_palindrome(121) == True)  # Output: True
print(is_palindrome(-121) == False)  # Output: True
print(is_palindrome(10) == False)  # Output: True","True
True
True",3,0
10,"def is_match(s, p):\n    import re\n    # Compiling the pattern with full string boundary anchors\n    pattern = re.compile('^' + p + '$')\n    return bool(pattern.match(s))\n\n# Test examples\ninputs = [('aa', 'a'), ('aa', 'a*'), ('ab', '.*')]\noutputs = [False, True, True]\nresults = []\nfor i, (s, p) in enumerate(inputs):\n    result = is_match(s, p)\n    print(f'Input {i+1} result is correct: {result == outputs[i]}')\n    results.append(result)\n\ndef main():\n    print('Testing regular expression matching...')\n    print(results)\n\nif __name__ == '__main__':\n    main()",,0,0
11,"def max_area(height):
    l, r = 0, len(height) - 1
    max_area = 0
    while l < r:
        max_area = max(max_area, (r - l) * min(height[l], height[r]))
        if height[l] < height[r]:
            l += 1
        else:
            r -= 1
    return max_area

# Test cases
height1 = [1,8,6,2,5,4,8,3,7]
expected1 = 49
result1 = max_area(height1) == expected1

height2 = [1,1]
expected2 = 1
result2 = max_area(height2) == expected2

height3 = [4,3,2,1,4]
expected3 = 16
result3 = max_area(height3) == expected3

print('Input 1 is correct:', result1)
print('Input 2 is correct:', result2)
print('Input 3 is correct:', result3)","Input 1 is correct: True
Input 2 is correct: True
Input 3 is correct: True",3,0
12,"def intToRoman(num): 
    value_map = [(1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')]
    roman = ''
    for value, numeral in value_map:
        while num >= value:
            roman += numeral
            num -= value
    return roman

test_cases = {3: 'III', 4: 'IV', 9: 'IX'}
results = {k: intToRoman(k)==v for k, v in test_cases.items()}
for k, v in results.items():
    print(f'Input: {k}, Output Correct: {v}')","Input: 3, Output Correct: True
Input: 4, Output Correct: True
Input: 9, Output Correct: True",3,0
13,"def roman_to_int(s):\n    roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    for char in reversed(s):\n        current_value = roman_map[char]\n        if current_value < prev_value:\n            total -= current_value\n        else:\n            total += current_value\n        prev_value = current_value\n    return total\n\ntest_cases = [('III', 3), ('IV', 4), ('IX', 9)]\nresults = [roman_to_int(tc[0]) == tc[1] for tc in test_cases]\nprint(results)",,0,0
14,"def longest_common_prefix(strs):
    if not strs:
        return """"
    shortest_str = min(strs, key=len)
    for i, char in enumerate(shortest_str):
        for other in strs:
            if other[i] != char:
                return shortest_str[:i]
    return shortest_str

strs1 = [""flower"",""flow"",""flight""]
output1 = ""fl""
print(longest_common_prefix(strs1) == output1)

strs2 = [""dog"",""racecar"",""car""]
output2 = """"
print(longest_common_prefix(strs2) == output2)","True
True",2,0
15,"def three_sum(nums):
    nums.sort()
    result = []
    for i in range(len(nums) - 2):
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        left, right = i + 1, len(nums) - 1
        while left < right:
            sum = nums[i] + nums[left] + nums[right]
            if sum < 0:
                left += 1
            elif sum > 0:
                right -= 1
            else:
                result.append([nums[i], nums[left], nums[right]])
                while left < right and nums[left] == nums[left + 1]:
                    left += 1
                while left < right and nums[right] == nums[right - 1]:
                    right -= 1
                left += 1
                right -= 1
    return result

# Test Cases
def verify_output(nums, expected):
    output = three_sum(nums)
    return sorted([sorted(sublist) for sublist in output]) == sorted([sorted(sublist) for sublist in expected])

print(verify_output([-1, 0, 1, 2, -1, -4], [[-1, -1, 2], [-1, 0, 1]]))
print(verify_output([], []))
print(verify_output([0], []))","True
True
True",3,0
16,"import sys
def three_sum_closest(nums, target):
    nums.sort()
    closest_sum = sys.maxsize
    for i in range(len(nums) - 2):
        left, right = i + 1, len(nums) - 1
        while left < right:
            current_sum = nums[i] + nums[left] + nums[right]
            if abs(target - current_sum) < abs(target - closest_sum):
                closest_sum = current_sum
            if current_sum < target:
                left += 1
            elif current_sum > target:
                right -= 1
            else:
                return current_sum
    return closest_sum

# Test cases
inputs = [([-1, 2, 1, -4], 1)]
outputs = [2]
results = [three_sum_closest(*inp) == out for inp, out in zip(inputs, outputs)]
print('Test Results:', results)",Test Results: [True],1,0
17,"def letter_combinations(digits):\n    if not digits:\n        return []\n    digit_to_char = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}\n    result = ['']\n    for digit in digits:\n        new_result = []\n        for combo in result:\n            for char in digit_to_char[digit]:\n                new_result.append(combo + char)\n        result = new_result\n    return result\n\ninputs = ['23', '', '2']\nexpected_outputs = [[""ad"",""ae"",""af"",""bd"",""be"",""bf"",""cd"",""ce"",""cf""], [], [""a"",""b"",""c""]]\nfor i, input_val in enumerate(inputs):\n    output = letter_combinations(input_val)\n    print(f'Input: {input_val} -> Output is correct: {set(output) == set(expected_outputs[i])}')",,0,0
18,"def four_sum(nums, target):
    nums.sort()
    result = []
    for i in range(len(nums) - 3):
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        for j in range(i + 1, len(nums) - 2):
            if j > i + 1 and nums[j] == nums[j - 1]:
                continue
            left, right = j + 1, len(nums) - 1
            while left < right:
                sum_val = nums[i] + nums[j] + nums[left] + nums[right]
                if sum_val == target:
                    result.append([nums[i], nums[j], nums[left], nums[right]])
                    while left < right and nums[left] == nums[left + 1]:
                        left += 1
                    while left < right and nums[right] == nums[right - 1]:
                        right -= 1
                    left += 1
                    right -= 1
                elif sum_val < target:
                    left += 1
                else:
                    right -= 1
    return result

inputs = [([1,0,-1,0,-2,2], 0), ([], 0), (third_input_example, third_input_target)]
outputs = [[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]], [], third_output_example]
for input_val, expected in zip(inputs, outputs):
    result = four_sum(*input_val)
    print(result == expected)",,0,0
19,"class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def removeNthFromEnd(head, n):
    fast = slow = head
    for _ in range(n):
        fast = fast.next
    if not fast:
        return head.next
    while fast.next:
        fast = fast.next
        slow = slow.next
    slow.next = slow.next.next
    return head

def list_to_nodes(lst):
    dummy = ListNode(0)
    current = dummy
    for value in lst:
        current.next = ListNode(value)
        current = current.next
    return dummy.next

def nodes_to_list(node):
    result = []
    while node:
        result.append(node.val)
        node = node.next
    return result

def test_case(lst, n, expected):
    head = list_to_nodes(lst)
    new_head = removeNthFromEnd(head, n)
    result = nodes_to_list(new_head)
    return result == expected

# Test examples
print(test_case([1,2,3,4,5], 2, [1,2,3,5]))  # Example 1
print(test_case([1], 1, []))  # Example 2
print(test_case([1,2], 1, [1]))  # Example 3","True
True
True",3,0
20,"def isValid(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n        else:\n            return False\n    return stack == []\n\ninputs = ['()', '()[]{}', '(]']\nexpected_outputs = [True, True, False]\nresults = [isValid(i) == eo for i, eo in zip(inputs, expected_outputs)]\nfor result in results:\n    print(result)",,0,0
21,"def merge_sorted_lists(l1, l2):\n    sorted_list = []\n    index_1 = 0\n    index_2 = 0\n    while index_1 < len(l1) and index_2 < len(l2):\n        if l1[index_1] <= l2[index_2]:\n            sorted_list.append(l1[index_1])\n            index_1 += 1\n        else:\n            sorted_list.append(l2[index_2])\n            index_2 += 1\n    if index_1 < len(l1):\n        sorted_list.extend(l1[index_1:])\n    if index_2 < len(l2):\n        sorted_list.extend(l2[index_2:])\n    return sorted_list\n\n# Test cases\nprint(merge_sorted_lists([1,2,4], [1,3,4]) == [1,1,2,3,4,4])\nprint(merge_sorted_lists([], []) == [])\nprint(merge_sorted_lists([], [0]) == [0])",,0,0
22,"def generate_parenthesis(n):
    def backtrack(s='', left=0, right=0):
        if len(s) == 2 * n:
            result.append(s)
            return
        if left < n:
            backtrack(s + '(', left + 1, right)
        if right < left:
            backtrack(s + ')', left, right + 1)

    result = []
    backtrack()
    return result

# Test cases
print(generate_parenthesis(3) == ['((()))', '(()())', '(())()', '()(())', '()()()']) # Output 1 comparison
print(generate_parenthesis(1) == ['()']) # Output 2 comparison","True
True",2,0
23,"import heapq

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def merge_k_lists(lists):
    min_heap = []
    dummy = ListNode(-1)
    current = dummy
    for index, lst in enumerate(lists):
        if lst:
            heapq.heappush(min_heap, (lst.val, index, lst))
    while min_heap:
        value, index, node = heapq.heappop(min_heap)
        current.next = ListNode(value)
        current = current.next
        if node.next:
            heapq.heappush(min_heap, (node.next.val, index, node.next))
    return dummy.next

def convert_to_list(lists):
    result = []
    for root in lists:
        values = []
        while root:
            values.append(root.val)
            root = root.next
        result.append(values)
    return result

# Test cases
input_1 = [ListNode(1, ListNode(4, ListNode(5))), ListNode(1, ListNode(3, ListNode(4))), ListNode(2, ListNode(6))]
expected_1 = [1,1,2,3,4,4,5,6]
print(convert_to_list([merge_k_lists(input_1)]) == [expected_1])

input_2 = []
expected_2 = []
print(convert_to_list([merge_k_lists(input_2)]) == [expected_2])

input_3 = [[]]
expected_3 = []
print(convert_to_list([merge_k_lists(input_3)]) == [expected_3])","True
True
True",3,0
24,"class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

def swapPairs(head: ListNode) -> ListNode:
    dummy = ListNode(0)
    dummy.next = head
    current = dummy

    while current.next and current.next.next:
        first = current.next
        second = current.next.next
        first.next = second.next
        current.next = second
        current.next.next = first
        current = current.next.next

    return dummy.next

def list_to_nodes(lst):
    dummy = ListNode(0)
    cur = dummy
    for number in lst:
        cur.next = ListNode(number)
        cur = cur.next
    return dummy.next

def nodes_to_list(head):
    result = []
    while head:
        result.append(head.val)
        head = head.next
    return result

inputs = [[1,2,3,4], [], [1]]
outputs = [[2,1,4,3], [], [1]]

for i, lst in enumerate(inputs):
    input_head = list_to_nodes(lst)
    expected_output = outputs[i]
    result_head = swapPairs(input_head)
    result_list = nodes_to_list(result_head)
    print(result_list == expected_output)","True
True
True",3,0
25,"class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def reverseKGroup(head: ListNode, k: int) -> ListNode:
    if head is None or k == 1:
        return head
    dummy = ListNode(0)
    dummy.next = head
    cur, prev, next = head, dummy, None
    count = 0
    while cur:
        cur = cur.next
        count += 1
    while count >= k:
        cur = prev.next
        next = cur.next
        for i in range(1, k):
            cur.next = next.next
            next.next = prev.next
            prev.next = next
            next = cur.next
        prev = cur
        count -= k
    return dummy.next

# testing expected outputs
example_1 = [1, 2, 3, 4, 5]
k_1 = 2
expected_1 = [2, 1, 4, 3, 5]
example_2 = [1, 2, 3, 4, 5]
k_2 = 3
expected_2 = [3, 2, 1, 4, 5]
example_3 = [1, 2, 3, 4, 5]
k_3 = 1
expected_3 = [1, 2, 3, 4, 5]

print(reverseKGroup(example_1, k_1) == expected_1)
print(reverseKGroup(example_2, k_2) == expected_2)
print(reverseKGroup(example_3, k_3) == expected_3)",,0,0
